import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as l,o as n}from"./app-C_wt19t6.js";const i="/assets/1174710-20190128200647649-2138221098-Dh6bJJ7S.png",t={};function h(p,s){return n(),e("div",null,s[0]||(s[0]=[l('<h1 id="mysql复习" tabindex="-1"><a class="header-anchor" href="#mysql复习"><span>Mysql复习</span></a></h1><h3 id="一、mysql事务及特性" tabindex="-1"><a class="header-anchor" href="#一、mysql事务及特性"><span>一、Mysql事务及特性</span></a></h3><p>是来自下方的连接：</p><p>​ <a href="https://zhuanlan.zhihu.com/p/29166694" target="_blank" rel="noopener noreferrer">数据库事务与MySQL事务总结</a></p><p>​ <a href="https://www.cnblogs.com/fengzheng/p/12557762.html" target="_blank" rel="noopener noreferrer">一文讲清楚MySQL事务隔离级别和实现原理，开发人员必备知识点</a></p><p>​ <a href="https://www.cnblogs.com/kismetv/p/10331633.html" target="_blank" rel="noopener noreferrer">深入学习MySQL事务：ACID特性的实现原理</a></p><h4 id="mysql-事务" tabindex="-1"><a class="header-anchor" href="#mysql-事务"><span>MySQL 事务</span></a></h4><p>​ 数据库事务指的是一组数据操作，事务内的操作要么就是全部成功，要么就是全部失败，什么都不做，其实不是没做，是可能做了一部分但是只要有一步失败，就要回滚所有操作</p><p>​ 事务具有原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）四个特性，简称 <code>ACID</code>，缺一不可。</p><h4 id="一、逻辑架构和存储引擎" tabindex="-1"><a class="header-anchor" href="#一、逻辑架构和存储引擎"><span>一、逻辑架构和存储引擎</span></a></h4><figure><img src="'+i+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>​ MySQL服务器逻辑架构从上往下可以分为三层：</p><p>（1）第一层：处理客户端连接、授权认证等。</p><p>（2）第二层：服务器层，负责查询语句的解析、优化、缓存以及内置函数的实现、存储过程等。</p><p>（3）第三层：存储引擎，负责MySQL中数据的存储和提取。<strong>MySQL</strong>中服务器层不管理事务，事务是由存储引擎实现的。**MySQL支持事务的存储引擎有InnoDB、NDB Cluster等，其中InnoDB的使用最为广泛；其他存储引擎不支持事务，如MyIsam、Memory等。</p></blockquote><h4 id="二、提交和回滚" tabindex="-1"><a class="header-anchor" href="#二、提交和回滚"><span>二、提交和回滚</span></a></h4><p>​ 典型的MySQL事务是如下操作的：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">start transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#一条或多条sql语句</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ start transaction标识事务开始，commit提交事务，将执行结果写入到数据库。如果sql语句执行出现问题，会调用rollback，回滚所有已经执行成功的sql语句。</p><h4 id="自动提交" tabindex="-1"><a class="header-anchor" href="#自动提交"><span><strong>自动提交</strong></span></a></h4><p>​ MySQL中默认采用的是自动提交（autocommit）模式:</p><figure><img src="`+i+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>​ 在自动提交模式下，如果没有start transaction显式地开始一个事务，那么每个sql语句都会被当做一个事务执行提交操作。</p><p>​ 通过如下方式，可以关闭autocommit；需要注意的是，autocommit参数是针对连接的，在一个连接中修改了参数，不会对其他连接产生影响。</p><figure><img src="'+i+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>​ 如果关闭了autocommit，则所有的sql语句都在一个事务中，直到执行了commit或rollback，该事务结束，同时开始了另外一个事务。</p><h4 id="特殊操作" tabindex="-1"><a class="header-anchor" href="#特殊操作"><span><strong>特殊操作</strong></span></a></h4><p>​ 在MySQL中，存在一些特殊的命令，如果在事务中执行了这些命令，会马上强制执行commit提交事务；如DDL语句(create table/drop table/alter/table)、lock tables语句等等。</p><p>不过，常用的select、insert、update和delete命令，都不会强制提交事务。</p><h4 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h4><h5 id="一、隔离性-isolation" tabindex="-1"><a class="header-anchor" href="#一、隔离性-isolation"><span>一、隔离性（Isolation）</span></a></h5><h6 id="_1-定义" tabindex="-1"><a class="header-anchor" href="#_1-定义"><span>1. 定义</span></a></h6><blockquote><p>​ **与原子性、持久性侧重于研究事务本身不同，隔离性研究的是不同事务之间的相互影响。**隔离性是指，事务内部的操作与其他事务是隔离的，并发执行的各个事务之间不能互相干扰。严格的隔离性，对应了事务隔离级别中的Serializable (可串行化)，但实际应用中出于性能方面的考虑很少会使用可串行化。</p><p>​ 隔离性追求的是并发情形下事务之间互不干扰。简单起见，我们主要考虑最简单的读操作和写操作(加锁读等特殊读操作会特殊说明)，那么隔离性的探讨，主要可以分为两个方面：</p><ul><li>(一个事务)写操作对(另一个事务)写操作的影响：锁机制保证隔离性</li><li>(一个事务)写操作对(另一个事务)读操作的影响：MVCC保证隔离性</li></ul></blockquote><h6 id="_2、概念说明" tabindex="-1"><a class="header-anchor" href="#_2、概念说明"><span>2、概念说明</span></a></h6><blockquote><h6 id="脏读" tabindex="-1"><a class="header-anchor" href="#脏读"><span>脏读</span></a></h6><p>​ 当前事务(A)中可以读到其他事务(B)未提交的数据（脏数据）。一个事务在执行过程中可以读到其他事务改变了但是没有提交的数据即其他事务没有提交的数据我可以读到。</p><figure><img src="https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201003630-2050662608.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h6 id="可重复读" tabindex="-1"><a class="header-anchor" href="#可重复读"><span>可重复读</span></a></h6><p>​ 可重复读指的是在一个事务内，最开始读到的数据和事务结束前的任意时刻读到的同一批数据都是一致的。通常针对数据**更新（UPDATE）**操作。数据不管在我这个事务开始的时候是什么样子就是什么样子，不管其他事务有没有在执行过程中修改了数据的内容。</p><h6 id="不可重复读" tabindex="-1"><a class="header-anchor" href="#不可重复读"><span>不可重复读</span></a></h6><p>​ 在事务A中先后两次读取同一个数据，两次读取的结果不一样，这种现象称为不可重复读。脏读与不可重复读的区别在于：前者读到的是其他事务未提交的数据，后者读到的是其他事务已提交的数据。即和可重读的区别就是，可重读就算在执行期间有其他事务的提交再次读时得到的还是在此事务开始执行前的值。举例如下：</p><figure><img src="https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201011603-1317894910.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h6 id="幻读" tabindex="-1"><a class="header-anchor" href="#幻读"><span>幻读</span></a></h6><p>​ 在事务A中按照某个条件先后两次查询数据库，两次查询结果的条数不同，这种现象称为幻读。不可重复读与幻读的区别可以通俗的理解为：前者是数据变了，后者是数据的行数变了。举例如下：</p><figure><img src="https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201021606-1089980279.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></blockquote><h6 id="_3、事务隔离级别" tabindex="-1"><a class="header-anchor" href="#_3、事务隔离级别"><span>3、事务隔离级别</span></a></h6><blockquote><p>​ SQL 标准定义了四种隔离级别，MySQL 全都支持。这四种隔离级别分别是：</p><ol><li><p><code>读未提交（READ UNCOMMITTED）</code></p></li><li><p><code>读提交 （READ COMMITTED）</code></p></li><li><p><code>可重复读 （REPEATABLE READ）</code></p></li><li><p><code>串行化 （SERIALIZABLE）</code></p><p>​ 从上往下，隔离强度<strong>逐渐增强</strong>，性能逐渐变差。采用哪种隔离级别要根据系统需求权衡决定，其中，<strong>可重复读</strong>是 MySQL 的默认级别。</p><p>​ 事务隔离其实就是为了<strong>解决</strong>上面提到的脏读、不可重复读、幻读这几个问题，下面展示了 4 种隔离级别对这三个问题的解决程度。</p></li></ol><table><thead><tr><th><strong>隔离级别</strong></th><th><strong>脏读</strong></th><th><strong>不可重复读</strong></th><th><strong>幻读</strong></th></tr></thead><tbody><tr><td>读未提交</td><td>可能</td><td>可能</td><td>可能</td></tr><tr><td>读提交</td><td>不可能</td><td>可能</td><td>可能</td></tr><tr><td>可重复读</td><td>不可能</td><td>不可能</td><td>可能</td></tr><tr><td>串行化</td><td>不可能</td><td>不可能</td><td>不可能</td></tr></tbody></table><p>​ 只有串行化的隔离级别解决了全部这 3 个问题，其他的 3 个隔离级别都有缺陷。</p><p>​ 在实际应用中，<strong>读未提交</strong>在并发时会导致很多问题，而性能相对于其他隔离级别提高却很有限，因此使用较少。<strong>可串行化</strong>强制事务串行，并发效率很低，只有当对数据一致性要求极高且可以接受没有并发时使用，因此使用也较少。因此在大多数数据库系统中，默认的隔离级别是<strong>读已提交</strong>(如Oracle)<strong>或</strong>可重复读（后文简称RR）。</p><p>​ 可以通过如下两个命令分别查看全局隔离级别和本次会话的隔离级别：</p><p><img src="https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201103652-719570401.png" alt="img" loading="lazy"><img src="https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201111615-210490190.png" alt="img" loading="lazy"></p><p>​ 在SQL标准中，RR是无法避免幻读问题的，但是InnoDB实现的RR避免了幻读问题。</p></blockquote><h6 id="_4、锁机制" tabindex="-1"><a class="header-anchor" href="#_4、锁机制"><span>4、锁机制</span></a></h6><p>隔离性要求同一时刻只能有一个事务对数据进行写操作，InnoDB通过锁机制来保证这一点。</p><p>锁机制的基本原理可以概括为：事务在修改数据之前，需要先获得相应的锁；获得锁之后，事务便可以修改数据；该事务操作期间，这部分数据是锁定的，其他事务如果需要修改数据，需要等待当前事务提交或回滚后释放锁。</p><blockquote><h6 id="行锁与表锁" tabindex="-1"><a class="header-anchor" href="#行锁与表锁"><span><strong>行锁与表锁</strong></span></a></h6><p>​ 按照粒度，锁可以分为表锁、行锁以及其他位于二者之间的锁。表锁在操作数据时会锁定整张表，并发性能较差；行锁则只锁定需要操作的数据，并发性能好。但是由于加锁本身需要消耗资源(获得锁、检查锁、释放锁等都需要消耗资源)，因此在锁定数据较多情况下使用表锁可以节省大量资源。MySQL中不同的存储引擎支持的锁是不一样的，例如MyIsam只支持表锁，而InnoDB同时支持表锁和行锁，且出于性能考虑，绝大多数情况下使用的都是行锁。</p><h6 id="查看锁信息" tabindex="-1"><a class="header-anchor" href="#查看锁信息"><span><strong>查看锁信息</strong></span></a></h6><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#锁的概况</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> information_schema</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">innodb_locks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#Innodb整体的状态，其中包括锁的情况</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">show engine innodb </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 一个例子：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#在事务A中执行</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">start transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#在事务B中执行</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">start transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> accout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> balance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 查看锁的情况：</p><figure><img src="https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128200929607-1639664811.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>​ show engine innodb status查看锁相关的部分：</p><figure><img src="https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128200936671-1683619195.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>​ 通过上述命令可以查看事务24052和24053占用锁的情况；其中lock_type为RECORD，代表锁为行锁(记录锁)；lock_mode为X，代表排它锁(写锁)。</p></blockquote><h6 id="_5、mvcc" tabindex="-1"><a class="header-anchor" href="#_5、mvcc"><span>5、MVCC</span></a></h6><h6 id="mvcc在mysql中的实现" tabindex="-1"><a class="header-anchor" href="#mvcc在mysql中的实现"><span>MVCC在mysql中的实现</span></a></h6><p>在Innodb中，会在每行数据后添加两个额外的隐藏值来实现mvcc，这两个值一个记录这行数据何时被创建，一个记录这行数据何时过期或者被删除。在实际操作中，存储的并不是时间，而是事务的版本号，每开启一个新的事务，事务的版本号就会递增，在可重读Repeatable read事务隔离级别下：</p><ul><li>select时，读取创建版本号 &lt;= 当前版本号，删除版本号为空 或 &gt; 当前事务版本号</li><li>insert时，保存当前事务版本号为行的创建版本号</li><li>delete时，保存当前事务版本号为行的删除版本号</li><li>update时，插入一条新记录，保存当前事务版本号为行创建版本号，同时保存当前事务版本号到原来删除的行。</li></ul><p>通过mvcc虽然每行记录都需要额外的存储空间，更多的行检查工作以及一些额外的维护工作，但可以减少锁的使用，大多数读操作都不用加锁，读数据操作很简单，性能很好，并且也能保证只读取到符合标准的行，也只锁住必要的行。</p><p>​ RR解决脏读、不可重复读、幻读等问题，使用的是MVCC：MVCC全称Multi-Version Concurrency Control，即多版本的并发控制协议。下面的例子很好的体现了MVCC的特点：在同一时刻，不同的事务读取到的数据可能是不同的(即多版本)——在T5时刻，事务A和事务C可以读取到不同版本的数据。</p><figure><img src="https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201126604-235257040.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>​ MVCC最大的优点是读不加锁，因此读写不冲突，并发性能好。InnoDB实现MVCC，多个版本的数据可以共存，主要基于以下技术及数据结构：</p><blockquote><p>1）隐藏列：InnoDB中每行数据都有隐藏列，隐藏列中包含了本行数据的<code>事务id</code>、<code>指向undo log的指针</code>等。</p><p>2）基于undo log的版本链：前面说到每行数据的隐藏列中包含了指向undo log的指针，而每条undo log也会指向更早版本的undo log，从而形成一条版本链。</p><p>3）ReadView：通过隐藏列和版本链，MySQL可以将数据恢复到指定版本；但是具体要恢复到哪个版本，则需要根据ReadView来确定。所谓ReadView，是指事务（记做事务A）在某一时刻给整个事务系统（trx_sys）打快照，之后再进行读操作时，会将读取到的数据中的事务id与trx_sys快照比较，从而判断数据对该ReadView是否可见，即对事务A是否可见。</p><blockquote><p>trx_sys中的主要内容，以及判断可见性的方法如下：</p><ul><li>low_limit_id：表示生成ReadView时系统中应该分配给下一个事务的id。如果数据的事务id大于等于low_limit_id，则对该ReadView不可见。</li><li>up_limit_id：表示生成ReadView时当前系统中活跃的读写事务中最小的事务id。如果数据的事务id小于up_limit_id，则对该ReadView可见。</li><li>rw_trx_ids：表示生成ReadView时当前系统中活跃的读写事务的事务id列表。如果数据的事务id在low_limit_id和up_limit_id之间，则需要判断事务id是否在rw_trx_ids中：如果在，说明生成ReadView时事务仍在活跃中，因此数据对ReadView不可见；如果不在，说明生成ReadView时事务已经提交了，因此数据对ReadView可见。</li></ul></blockquote></blockquote><p>下面以RR隔离级别为例，结合前文提到的几个问题分别说明。</p><h6 id="_1-脏读" tabindex="-1"><a class="header-anchor" href="#_1-脏读"><span>（1）脏读</span></a></h6><figure><img src="https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201139635-1779107964.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>​ 当事务A在T3时刻读取zhangsan的余额前，会生成ReadView，由于此时事务B没有提交仍然活跃，因此其事务id一定在ReadView的rw_trx_ids中，因此根据前面介绍的规则，事务B的修改对ReadView不可见。接下来，事务A根据指针指向的undo log查询上一版本的数据，得到zhangsan的余额为100。这样事务A就避免了脏读。</p><h6 id="_2-不可重复读" tabindex="-1"><a class="header-anchor" href="#_2-不可重复读"><span>（2）不可重复读</span></a></h6><figure><img src="https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201149661-1275460669.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>​ 当事务A在T2时刻读取zhangsan的余额前，会生成ReadView。此时事务B分两种情况讨论，一种是如图中所示，事务已经开始但没有提交，此时其事务id在ReadView的rw_trx_ids中；一种是事务B还没有开始，此时其事务id大于等于ReadView的low_limit_id。无论是哪种情况，根据前面介绍的规则，事务B的修改对ReadView都不可见。</p><p>​ 当事务A在T5时刻再次读取zhangsan的余额时，会根据T2时刻生成的ReadView对数据的可见性进行判断，从而判断出事务B的修改不可见；因此事务A根据指针指向的undo log查询上一版本的数据，得到zhangsan的余额为100，从而避免了不可重复读。</p><h6 id="_3-幻读" tabindex="-1"><a class="header-anchor" href="#_3-幻读"><span>（3）幻读</span></a></h6><figure><img src="https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201206609-1998192060.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>MVCC避免幻读的机制与避免不可重复读非常类似。</p><p>当事务A在T2时刻读取0&lt;id&lt;5的用户余额前，会生成ReadView。此时事务B分两种情况讨论，一种是如图中所示，事务已经开始但没有提交，此时其事务id在ReadView的rw_trx_ids中；一种是事务B还没有开始，此时其事务id大于等于ReadView的low_limit_id。无论是哪种情况，根据前面介绍的规则，事务B的修改对ReadView都不可见。</p><p>当事务A在T5时刻再次读取0&lt;id&lt;5的用户余额时，会根据T2时刻生成的ReadView对数据的可见性进行判断，从而判断出事务B的修改不可见。因此对于新插入的数据lisi(id=2)，事务A根据其指针指向的undo log查询上一版本的数据，发现该数据并不存在，从而避免了幻读。</p><h6 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展"><span><strong>扩展</strong></span></a></h6><p>​ 前面介绍的MVCC，是RR隔离级别下“非加锁读”实现隔离性的方式。下面是一些简单的扩展。</p><h6 id="_1-读已提交-rc-隔离级别下的非加锁读" tabindex="-1"><a class="header-anchor" href="#_1-读已提交-rc-隔离级别下的非加锁读"><span>（1）读已提交（RC）隔离级别下的非加锁读</span></a></h6><p>RC与RR一样，都使用了MVCC，其主要区别在于：</p><p>​ RR是在事务开始后第一次执行select前创建ReadView，直到事务提交都不会再创建。根据前面的介绍，RR可以避免脏读、不可重复读和幻读。</p><p>​ RC每次执行select前都会重新建立一个新的ReadView，因此如果事务A第一次select之后，事务B对数据进行了修改并提交，那么事务A第二次select时会重新建立新的ReadView，因此事务B的修改对事务A是可见的。因此RC隔离级别可以避免脏读，但是无法避免不可重复读和幻读。</p><h6 id="_2-加锁读与next-key-lock" tabindex="-1"><a class="header-anchor" href="#_2-加锁读与next-key-lock"><span>（2）加锁读与next-key lock</span></a></h6><p>按照是否加锁，MySQL的读可以分为两种：</p><p>​ 一种是非加锁读，也称作快照读、一致性读，使用普通的select语句，这种情况下使用MVCC避免了脏读、不可重复读、幻读，保证了隔离性。</p><p>​ 另一种是加锁读，查询语句有所不同，如下所示：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#共享锁读取</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...lock </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> share mode</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#排它锁读取</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> update</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 加锁读在查询时会对查询的数据加锁（共享锁或排它锁）。由于锁的特性，当某事务对数据进行加锁读后，其他事务无法对数据进行写操作，因此可以避免脏读和不可重复读。而避免幻读，则需要通过next-key lock。<strong>next-key lock</strong>是行锁的一种，实现相当于record lock(记录锁) + gap lock(间隙锁)；其特点是不仅会锁住记录本身(record lock的功能)，还会锁定一个范围(gap lock的功能)。因此，加锁读同样可以避免脏读、不可重复读和幻读，保证隔离性。</p><h5 id="二、原子性-atomicity" tabindex="-1"><a class="header-anchor" href="#二、原子性-atomicity"><span>二、原子性（Atomicity）</span></a></h5><h6 id="_1、定义" tabindex="-1"><a class="header-anchor" href="#_1、定义"><span>1、定义</span></a></h6><p>​ 原子性是指一个事务是一个不可分割的工作单位，其中的操作要么都做，要么都不做；如果事务中一个sql语句执行失败，则已执行的语句也必须回滚，数据库退回到事务前的状态。</p><h6 id="_2、实现原理-undo-log" tabindex="-1"><a class="header-anchor" href="#_2、实现原理-undo-log"><span>2、实现原理：undo log</span></a></h6><blockquote><p>​ MySQL的事务日志有很多种，如二进制日志、错误日志、查询日志、慢查询日志等，此外InnoDB存储引擎还提供了两种事务日志：<strong>redo log</strong>(重做日志)和<strong>undo log</strong>(回滚日志)。其中redo log用于<strong>保证事务持久性</strong>；undo log则是<strong>事务原子性</strong>和<strong>隔离性</strong>实现的基础。</p><p>​ undo log。实现原子性的关键，是当事务回滚时能够撤销所有已经成功执行的sql语句。<strong>InnoDB</strong>实现回滚，靠的是undo log：当事务对数据库进行修改时，InnoDB会生成对应的undo log；如果事务执行失败或调用了rollback，导致事务需要回滚，便可以利用undo log中的信息将数据回滚到修改之前的样子。</p><p>​ undo log属于逻辑日志，它记录的是sql执行相关的信息。当发生回滚时，InnoDB会根据undo log的内容做与之前相反的工作：对于每个insert，回滚时会执行delete；对于每个delete，回滚时会执行insert；对于每个update，回滚时会执行一个相反的update，把数据改回去。</p><p>​ 以update操作为例：当事务执行update时，其生成的undo log中会包含被修改行的主键(以便知道修改了哪些行)、修改了哪些列、这些列在修改前后的值等信息，回滚时便可以使用这些信息将数据还原到update之前的状态。</p></blockquote><h5 id="三、一致性-consistency" tabindex="-1"><a class="header-anchor" href="#三、一致性-consistency"><span>三、一致性（Consistency）</span></a></h5><h6 id="_1-定义-1" tabindex="-1"><a class="header-anchor" href="#_1-定义-1"><span>1. 定义</span></a></h6><p>​ 一致性是指事务执行结束后，**数据库的完整性约束没有被破坏，事务执行的前后都是合法的数据状态。**数据库的完整性约束包括但不限于：实体完整性（如行的主键存在且唯一）、列完整性（如字段的类型、大小、长度要符合要求）、外键约束、用户自定义完整性（如转账前后，两个账户余额的和应该不变）。</p><h6 id="_2-实现" tabindex="-1"><a class="header-anchor" href="#_2-实现"><span>2. 实现</span></a></h6><blockquote><p>​ 可以说，一致性是事务追求的最终目标：前面提到的原子性、持久性和隔离性，都是为了保证数据库状态的一致性。此外，除了数据库层面的保障，一致性的实现也需要应用层面进行保障。</p><p>​ 实现一致性的措施包括：</p><ul><li>保证原子性、持久性和隔离性，如果这些特性无法保证，事务的一致性也无法保证</li><li>数据库本身提供保障，例如不允许向整形列插入字符串值、字符串长度不能超过列的限制等</li><li>应用层面进行保障，例如如果转账操作只扣除转账者的余额，而没有增加接收者的余额，无论数据库实现的多么完美，也无法保证状态的一致</li></ul></blockquote><h5 id="四、持久性-durability" tabindex="-1"><a class="header-anchor" href="#四、持久性-durability"><span>四、持久性（Durability）</span></a></h5><h6 id="_1-定义-2" tabindex="-1"><a class="header-anchor" href="#_1-定义-2"><span>1. 定义</span></a></h6><p>​ 持久性是指事务一旦提交，它对数据库的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</p><h6 id="_2-实现原理-redo-log" tabindex="-1"><a class="header-anchor" href="#_2-实现原理-redo-log"><span>2. 实现原理：redo log</span></a></h6><blockquote><p>​ InnoDB作为MySQL的存储引擎，数据是存放在磁盘中的，但如果每次读写数据都需要磁盘IO，效率会很低。为此，InnoDB提供了缓存(<strong>Buffer Pool</strong>)，<strong>Buffer Pool</strong>中包含了磁盘中部分数据页的映射，作为访问数据库的缓冲：<code>当从数据库读取数据时，会首先从Buffer Pool中读取，如果Buffer Pool中没有，则从磁盘读取后放入Buffer Pool</code>；当向数据库写入数据时，会首先写入Buffer Pool，Buffer Pool中修改的数据会定期刷新到磁盘中（这一过程称为刷脏）。</p><p>​ <strong>Buffer Pool</strong>的使用大大提高了读写数据的效率，但是也带了新的问题：如果MySQL宕机，而此时Buffer Pool中修改的数据还没有刷新到磁盘，就会导致数据的丢失，事务的持久性无法保证。</p><p>​ 于是，<strong>redo log</strong>被引入来<strong>解决</strong>这个问题：<strong>当数据修改时，除了修改Buffer Pool中的数据，还会在redo log记录这次操作；当事务提交时，会调用fsync接口对redo log进行刷盘。如果MySQL宕机，重启时可以读取redo log中的数据，对数据库进行恢复。<strong>redo log采用的是WAL（Write-ahead logging，预写式日志），所有修改先写入日志，再更新到Buffer Pool，保证了数据不会因MySQL宕机而丢失，从而满足了</strong>持久性</strong>要求。</p><p>​ 既然redo log也需要在事务提交时将日志写入磁盘，**为什么它比直接将Buffer Pool中修改的数据写入磁盘(即刷脏)要快呢？**主要有以下两方面的原因：</p><p>（1）刷脏是随机IO，因为每次修改的<strong>数据位置随机</strong>，但写redo log是追加操作，属于<strong>顺序IO</strong>。</p><p>（2）刷脏是以数据页（Page）为单位的，MySQL默认页大小是16KB，<strong>一个Page上一个小修改都要整页写入</strong>；而redo log中只包含真正需要写入的部分，无效IO大大减少。</p></blockquote><h6 id="_3-redo-log与binlog" tabindex="-1"><a class="header-anchor" href="#_3-redo-log与binlog"><span>3. redo log与binlog</span></a></h6><blockquote><p>​ 在MySQL中还存在binlog(二进制日志)也可以记录写操作并用于数据的恢复,但是redo log和bin log还是有些区别的：</p><p>（1）作用不同：redo log是用于crash recovery的，保证MySQL宕机也不会影响持久性；binlog是用于point-in-time recovery的，保证服务器可以基于时间点恢复数据，此外binlog还用于<code>主从复制</code>。</p><p>（2）层次不同：redo log是InnoDB存储引擎实现的，而binlog是MySQL的服务器层(可以参考文章前面对MySQL逻辑架构的介绍)实现的，同时支持InnoDB和其他存储引擎。</p><p>（3）内容不同：redo log是物理日志，内容基于磁盘的Page；binlog的内容是二进制的，根据binlog_format参数的不同，可能基于sql语句、基于数据本身或者二者的混合。</p><p>（4）写入时机不同：binlog在事务提交时写入；redo log的写入时机相对多元：</p><ul><li>前面曾提到：当事务提交时会调用fsync对redo log进行刷盘；这是默认情况下的策略，修改innodb_flush_log_at_trx_commit参数可以改变该策略，但事务的持久性将无法保证。</li><li>除了事务提交时，还有其他刷盘时机：如master thread每秒刷盘一次redo log等，这样的好处是不一定要等到commit时刷盘，commit速度大大加快。</li></ul></blockquote><h3 id="二、mysql主从复制" tabindex="-1"><a class="header-anchor" href="#二、mysql主从复制"><span>二、MySQL主从复制</span></a></h3><h4 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h4><p>​ MySQL主从复制是其最重要的功能之一。主从复制是指一台服务器充当主数据库服务器，另一台或多台服务器充当从数据库服务器，主服务器中的数据自动复制到从服务器之中。对于多级复制，数据库服务器即可充当主机，也可充当从机。MySQL主从复制的基础是主服务器对数据库修改记录二进制日志，从服务器通过主服务器的二进制日志自动执行更新。</p><h5 id="binlog和relaylog的作用" tabindex="-1"><a class="header-anchor" href="#binlog和relaylog的作用"><span>binlog和relaylog的作用</span></a></h5><blockquote><p>binlog的主要作用是记录数据库中表的更改，它只记录改变数据的sql，不改变数据的sql不会写入，比如select语句一般不会被记录，因为他们不会对数据产生任何改动。</p><p>relay log中（中继日志）中，中继日志也是记录日志更新的信息的</p></blockquote><h4 id="为什么需要主从复制" tabindex="-1"><a class="header-anchor" href="#为什么需要主从复制"><span>为什么需要主从复制</span></a></h4><ul><li><p>提高数据库读写性能，提升系统吞吐量</p><p>​ 在业务复杂的系统中，如果有一条 SQL 语句的执行需要锁表，导致 MySQL 暂时不能提供读的服务，那么就很影响运行中的业务，使用主从复制，让主库负责写，从库负责读，这样即使主库出现了锁表的情景，通过读从库也可以保证业务的正常运作。</p><p>​ 这样读写分离的过程能够是整体的服务性能提高，即使写操作时间比较长，也不影响读操作的进行。</p></li></ul><h4 id="主从复制原理" tabindex="-1"><a class="header-anchor" href="#主从复制原理"><span>主从复制原理</span></a></h4><figure><img src="https://res-static.hc-cdn.cn/fms/img/e5e05b7b5cfd963c94c23a970564041f1603768896154" alt="小白都能懂的Mysql主从复制原理（原理+实操）3" tabindex="0" loading="lazy"><figcaption>小白都能懂的Mysql主从复制原理（原理+实操）3</figcaption></figure><p>Mysql的主从复制中主要有三个线程：<code>binlog dump thread、slave的I/O thread 、SQL thread）</code>。</p><blockquote><p>当Master有数据更新的时候，会按照binlog 的格式，将更新的事件类型写入master的binlog文件中，创建binlog dump thread通知slave说master库中有数据更新，此时slave接收到通知之后，会创建I/O thread来请求master，master会返回binlog文件的副本以及数据更新的位置，slave收到binlog副本文件后，将文件保存在relay log中（中继日志）中，中继日志也是记录日志更新的信息的，随后sql thread在slave中创建，将更新的内容同步到slave数据库中，这样就保证了主从的数据同步。</p></blockquote><p>以上就是主从复制的过程，当然，主从复制的过程有不同的策略方式进行数据的同步，主要包含以下几种：</p><p>同步策略：Master会等待所有的slave都回应后才会提交，这会使主从同步的性能严重的影响</p><p>半同步策略：Master至少会等待一个slave回应后在提交</p><p>异步策略：Master不用等待slave回应就可以提交</p><p>延迟策略：slave要落后Master指定的时间</p><h4 id="主从搭建" tabindex="-1"><a class="header-anchor" href="#主从搭建"><span>主从搭建</span></a></h4><h5 id="删除mysql" tabindex="-1"><a class="header-anchor" href="#删除mysql"><span>删除mysql</span></a></h5><p>这里提供centos7下完全卸载MySQL的方法</p><blockquote><p>首先检查centos 7里面的Mysql安装包和依赖包：</p></blockquote><blockquote><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rpm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -qa</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接着可以删除上面的安装包和依赖包：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remove</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>继续检查一下是否存在Mariadb，若是存在直接删除Mariadb</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 检查是否存在Mariadb</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rpm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -qa</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mariadb</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 删除Mariadb</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rpm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --nodeps</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mariadb-libs-xxxxx.el7.x86_64</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，就是删除Mysql的配置文件，可以使用下面的命令查找Msqyl配置文件的路径：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> find</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后，通过下面的命令，将他们逐一删除：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -rf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/lib64/mysql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接着就开始安装Mysql 8了，使用wget命令下载Mysql 8的repo源，并且执行安装：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://repo.mysql.com//mysql80-community-release-el7-3.noarch.rpm</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yum</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -y</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql80-community-release-el7-3.noarch.rpm</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p>安装完后会在/etc/yum.repos.d/目录下生成下面的两个文件，说明安装成功了：</p><p>mysql-community.repo<br> mysql-community-source.repo</p><p>安装完Mysql8后，接着来更新一下yum源，并且查看yum仓库中的Mysql：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 更新yum源</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clean</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> all</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> makecache</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查看yum仓库中的Mysql</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以查看到仓库中存在mysql-community-server.x86_64，直接安装就行了：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">sudo</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> yum</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">y</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> install</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mysql</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">community</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">server</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接着启动Mysql，并检查Mysql的状态：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 启动Mysql</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">systemctl</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> start</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  mysqld</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">service</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 检查Mysql的状态</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">systemctl</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> status</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mysqld</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><a href="https://blog.csdn.net/weixin_43640848/article/details/113064552?spm=1001.2014.3001.5501" target="_blank" rel="noopener noreferrer">修改密码参考此链接的博客</a></p><h5 id="开始搭建" tabindex="-1"><a class="header-anchor" href="#开始搭建"><span>开始搭建</span></a></h5><p>这里使用的使用两台centos 7的vmware的ip分别是<code>192.168.163.155（Slave）</code>和<code>192.168.163.156（Master）</code>作为测试，首先在192.168.163.156（Master）中创建一个测试库test：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建测试库</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> database</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> test</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> character</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> set</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> utf8mb4</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> collate</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> utf8mb4_general_ci</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 并且授权</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">grant</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> all</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> privileges</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> on</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;test&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后编辑Master中的my.cnf文件，此文件位于/etc/my.cnf，执行下面的sql，并添加下面的信息：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">sudo</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> vi</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">etc</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">my</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cnf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">==========</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">以下是配置文件中的信息</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=============</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 配置编码为</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">utf8</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">character_set_server</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">utf8mb4</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">init_connect</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;SET NAMES utf8mb4&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 配置要给</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Slave</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">同步的数据库</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">binlog</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">db</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">test</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 不用给</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Slave</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">同步的数据库，一般是</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">自带的数据库就不用给</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Slave</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">同步了</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">binlog</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">ignore</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">db</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">mysql</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">binlog</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">ignore</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">db</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">information_schema</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">binlog</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">ignore</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">db</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">performance_schema</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">binlog</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">ignore</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">db</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">sys</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 自动清理30天前的</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">expire_logs_days</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 启用二进制日志</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">log</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">bin</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">mysql</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">bin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Master</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">的</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">，这个要唯一，唯一是值，在主从中唯一</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">server</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完后重启Mysql服务，并查看Mysql的log_bin日志是否启动成功：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">systemctl</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> restart</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mysqld</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 查看</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">log_bin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">日志是否启动成功</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">show</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> variables</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> like</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;%log_bin%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://res-static.hc-cdn.cn/fms/img/e4f43074b2ac347b63eb72413cc238d51603768896155" alt="小白都能懂的Mysql主从复制原理（原理+实操）10" tabindex="0" loading="lazy"><figcaption>小白都能懂的Mysql主从复制原理（原理+实操）10</figcaption></figure><p>接着查看Master的状态：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">show</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> master</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://res-static.hc-cdn.cn/fms/img/378a21cfaace770d4c2612f488e286d11603768896155" alt="小白都能懂的Mysql主从复制原理（原理+实操）11" tabindex="0" loading="lazy"><figcaption>小白都能懂的Mysql主从复制原理（原理+实操）11</figcaption></figure><p>这两个数据<code>File</code>和<code>Position</code>要记住，后面配置Slave的时候要使用到这两个数据。</p><p>最后登陆Master的数据库，并创建一个用户用于同步数据：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> user</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;backup&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;%&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> IDENTIFIED</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> BY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;LDCldc-2020&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">grant</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> file</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> on</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;backup&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">GRANT</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> REPLICATION</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> SLAVE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">REPLICATION</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> CLIENT</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> ON</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;backup&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里Master的配置就配置完了，后面就进行Slave的配置。</p><p>在Slave中同样要创建test数据库，并且授权给test用户</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 创建同步数据的</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">数据库</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> database</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> test</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> character</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> set</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> utf8mb4</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> collate</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> utf8mb4_general_ci</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 授权</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">grant</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> all</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> privileges</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> on</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;test&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着编辑Slave中my.cnf文件，同样是在/etc/my.cnf路径下，加入如下配置：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 配置从服务器的</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">ID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">，唯一的</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">server</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#加上以下参数可以避免更新不及时，</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">SLAVE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 重启后导致的主从复制出错。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">read_only</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">master_info_repository</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">TABLE</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">relay_log_info_repository</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">TABLE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且重启Slave中的Mysql服务：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">systemctl</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> restart</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mysqld</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在Slave中添加Master的信息：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">master_host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">是</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Master</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">的</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">ip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">，</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">master_log_file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">和</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">master_log_pos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">就是配置之前查看</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Master</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">状态时显示的</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">File</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">和</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Position</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">信息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">change</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> master</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> to</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> master_host</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;192.168.163.156&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">master_port</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3306</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">master_user</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;backup&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">master_password</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;LDCldc-2020&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">master_log_file</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;mysql-bin.000001&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">master_log_pos</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1513</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后查看Slave的状态：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">show</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> slave</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">G</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://res-static.hc-cdn.cn/fms/img/33e958b62244225ced7111c1dfd6d72b1603768896156" alt="小白都能懂的Mysql主从复制原理（原理+实操）12" tabindex="0" loading="lazy"><figcaption>小白都能懂的Mysql主从复制原理（原理+实操）12</figcaption></figure><p>当看到<code>Slave_IO_Running</code>和<code>Slave_SQL_Running</code>都是yes的时候，这表示主从配置成功。</p><p><strong>「Slave_IO_Running也就是Slave中的IO线程用于请求Master，Slave_SQL_Running时sql线程将中继日志中更新日志同步到Slave数据库中。」</strong></p><p>但是，有时候Slave_IO_Running会为no，而Slave_SQL_Running为yes</p><p>首先看重启一下<code>Slave</code>的MySQL服务：<code>systemctl restart mysqld</code>，然后执行：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">stop</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> slave</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> slave</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就能够使<code>Slave_IO_Running</code>和<code>Slave_SQL_Running</code>显示都是yes了</p><h4 id="mysql主机宕机的解决方法" tabindex="-1"><a class="header-anchor" href="#mysql主机宕机的解决方法"><span>Mysql主机宕机的解决方法</span></a></h4><p>​ 假设我们有三个机子</p><p>master： 192.168.80.130</p><p>slave：192.168.80.143</p><p>slave：192.168.80.146</p><p>​ 首先模拟（MySQL---master）宕机：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">service</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysqld</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stop</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ 当master宕机后去slave去查看是否出现错误信息</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>show slave status\\G;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ 这时两台SLAVE主机已经连接不上MASTER</p><p>​ IO进程和sql进程状态：Slave_IO_Running: Connecting(该状态表示会一直尝试重连主，如果主正常了，该进程状态会自动变成Yes)，此时，master不能提供读写服务。我们想将其中最新的slave提升为主。</p><p>​ 具体操作步骤如下：</p><p>1、在每个SLAVE库上执行：</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>stop  slave io_thread;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>show  processlist;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直到看到Slave has read all relay log; waitingfor more updates,则表示从库更新都执行完毕了</p><p>2、 选择新的主库</p><p>​ 对比选择Relay_Master_Log_File,Exec_Master_Log_Pos最大的作为新的主库，这里我们选择slave1为新的主库</p><p>​ 其实，如果两个从IO进程一直都是正常，没有落后于主，且relay log都已经重放完成，两个从是一样的，选择哪个都可以。</p><p>​ 这里选择slave1作为新主。</p><p>3、进行相应配置</p><p>​ 登陆slave1，执行stop slave;并进入数据库目录，删除master.info和relay-log.info文件（删除前，可以先备份下这俩文件）；</p><p>​ 配置my.cnf文件，开启log-bin,如果有log-slaves-updates=1和read-only=1则要注释掉，然后重启slave1.</p><p>4、 reset master</p><blockquote><p>在slave1上reset master，会重新生成二进制日志。</p><p>mysql&gt; reset master;</p><p>Query OK, 0 rows affected (0.02 sec)</p><p>mysql&gt; show master status;<br> +------------------+----------+--------------+------------------+<br> | File | Position | Binlog_Do_DB | Binlog_Ignore_DB |<br> +------------------+----------+--------------+------------------+<br> | mysql-log.000001 | 399 | | |<br> +------------------+----------+--------------+------------------+<br> 1 row in set (0.00 sec)</p></blockquote><p>5、创建用于同步的用户</p><p>如果slave1完全同步master的话，这步可以省略。</p><p>6、 slave2指向slave1</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" data-title="mysql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mysql&gt;change master to master_user=&#39;RepUser&#39;,master_password=&#39;beijing&#39;,master_host=&#39;192.168.80.134&#39;,master_port=3306,master_log_file=&#39;mysql-bin.000001&#39;,master_log_pos=154;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt;start slave;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、各种树结构的比较" tabindex="-1"><a class="header-anchor" href="#三、各种树结构的比较"><span>三、各种树结构的比较</span></a></h3><h4 id="二叉查找树-二叉搜索树" tabindex="-1"><a class="header-anchor" href="#二叉查找树-二叉搜索树"><span>二叉查找树（二叉搜索树）</span></a></h4><blockquote><h4 id="什么是二叉查找树" tabindex="-1"><a class="header-anchor" href="#什么是二叉查找树"><span>什么是二叉查找树</span></a></h4><ol><li>左子树所有节点的值均小于或等于它的根节点的值</li><li>右子树上所有节点的值均大于或等于它的根节点的值</li><li>左、右子树也分别为二叉排序树</li></ol><h4 id="平衡二叉树" tabindex="-1"><a class="header-anchor" href="#平衡二叉树"><span>平衡二叉树</span></a></h4><p>平衡二叉树的出现就是为了保证树不至于太倾斜，尽量保证两边平衡，那么什么样的树称为平衡二叉树？</p><ul><li>定义：要么是一个空树，要么保证左右子树的高度差&lt;=1，同时每一个子树都是平衡二叉树</li><li>当然，为保证二叉树的平衡性，平衡二叉树在添加和删除节点是需要进行旋转以保持树的平衡</li><li>既能保持左右子树的高度差&lt;=1，其实也就保证的平衡二叉树的插入，查询的时间复杂度都是O(log2(n))</li></ul></blockquote><h4 id="红黑树" tabindex="-1"><a class="header-anchor" href="#红黑树"><span>红黑树</span></a></h4><blockquote><p>红黑树也是二叉查找树，红黑树之所以难死难在它是自平衡的二叉查找树，在进行插入和删除等可能破坏树的平衡的操作是，需要重新自处理达到平衡状态。</p><h4 id="红黑树的定义和性质" tabindex="-1"><a class="header-anchor" href="#红黑树的定义和性质"><span>红黑树的定义和性质</span></a></h4><p>红黑树是一种含有红黑节点并且能够自平衡的二叉查找树，他必须满足下面的性质：</p><ol><li>每个节点要么是黑色，要么就是红色</li><li>根节点是黑色</li><li>每个叶子节点是黑色</li><li>每个红色节点的两个子节点一定是黑色</li><li>任意节点到每个叶子节点的路径都包含数量相同的黑节点</li><li>从性质5推出如果一个节点存在黑子节点，那么该节点肯定有两个子节点</li></ol><figure><img src="https://upload-images.jianshu.io/upload_images/2392382-4996bbfb4017a3b2.png?imageMogr2/auto-orient/strip|imageView2/2/w/526/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>红黑树并不是一个<em>完美</em>平衡二叉查找树，从上图可以看到，根结点P的左子树显然比右子树高，但左子树和右子树的黑结点的层数是相等的，也即任意一个结点到到每个叶子结点的路径都包含数量相同的黑结点(性质5)。所以我们叫红黑树这种平衡为<strong>黑色完美平衡</strong>。</p><p>红黑树节点的叫法：<img src="https://upload-images.jianshu.io/upload_images/2392382-abedf3ecc733ccd5.png?imageMogr2/auto-orient/strip|imageView2/2/w/772/format/webp" alt="img" loading="lazy"></p><p>红黑树能自平衡它靠的是三种操作：左旋、右旋和变色</p><ul><li>左旋：以某个节点作为支点（旋转节点），其右子节点变为旋转节点的父节点，右子节点的左子节点变为旋转节点的右子节点，左子节点保持不变</li></ul><figure><img src="https://upload-images.jianshu.io/upload_images/2392382-a95db442f1b47f8a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>右旋：以某个节点作为支点（旋转节点），其左子节点变为旋转节点的父节点，左子节点的右子节点变为旋转节点的左子节点，右子节点保持不变</li></ul><figure><img src="https://upload-images.jianshu.io/upload_images/2392382-0676a8e2a12e2a0b.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>变色：节点的颜色由红变黑或由黑边红</li></ul><p>左旋只影响旋转节点和其右子树的结构，把右子树的节点往左子树挪了</p><p>右旋只影响旋转节点和其左子树的结构，把左子树的节点往右子树挪了</p><p><a href="https://www.jianshu.com/p/e136ec79235c" target="_blank" rel="noopener noreferrer">红黑树的理解</a></p></blockquote><h4 id="b树-b-树" tabindex="-1"><a class="header-anchor" href="#b树-b-树"><span>B树（B - 树）</span></a></h4><h4 id="b-树" tabindex="-1"><a class="header-anchor" href="#b-树"><span>B+树</span></a></h4><h3 id="四、索引失效" tabindex="-1"><a class="header-anchor" href="#四、索引失效"><span>四、索引失效</span></a></h3><ol><li><p>如果<code>条件中有or的话</code>，即使其中有条件带索引也不会使用，如果想使用or又想让索引生效的话，那就得为or条件中的每个列都加上索引。</p></li><li><p><code>like通配符</code>，但是用模糊搜索是，尽量采用后置的通配符，例如：name||‘%’，因为走索引时，会从前去匹配索引列，这时候是可以找到的，如果采用前匹配，那么查索引就会很麻烦，比如查询所有姓张的人，就可以去搜索“张%”，相反如果你查询叫“明”的人，那么只能是“%明”，这时候索引就无法定位，所以在前匹配符的情况下，执行计划会更倾向于选择全表扫描，后匹配的话会走索引（INDEX RANGE SCAN）。所以业务设计如果考虑到模糊搜索问题的话要尽量使用后置通配符。</p></li><li><p>如果<code>列类型是字符串</code>，那一定要在条件中将数据使用引号引用起来，否则不会使用索引</p></li><li><p>例如在某个表中，有两列（id和_id）都建立了单独索引，下面这种查询条件不会走索引</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> test </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _id;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><code>存在NULL值条件</code>，并不是存在null值就不能使用索引，当查询某列值是否为null或者和其他条件一起使用的时候都是可以使用到索引的，包括给存在null值的列添加联合索引，使用SQL进行条件查询的时候也可以使用到索引。虽然mysql可以在含有null的列上使用索引，但是不代表null和其他数据在索引中是一样的，不建议列上允许为空，最好设置not null，并设置一个默认值，比如0和“ ”空字符串等，如果是datetime类型，可以设置成“1970-01-0 00:00:00”这样的特殊值。对于mysql来说，null是一个特殊值，不能使用&lt;,=,&gt;这样的运算符，对null做算术运算的结果都是null，count时不会包括null行，某列可为null比not null可能小更多的存储空间。</p></li><li><p><code>NOT条件</code>，我们建立索引时，如果查询条件为等值或者范围查询时，索引可以根据查询条件去找对应的条目，反过来当查询条件为非是，索引定位就比较困难了，执行计划是可能会更倾向于全表扫描，这类的查询条件有：&lt;&gt;、NOT、in、not exists</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> test </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">500</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> test </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> test </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">9</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> test </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> exists</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> test_02</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>条件上包括函数，查询条件上尽量不要<code>对索引使用函数</code>，比如下面这个sql</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> test </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> upper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;SUNYANG&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#这样是不会走索引的，因为索引在建立是会和计算之后的可能不同，无法定位到索引，但是如果查询条件不是对索引列进行计算，那么可以走索引，比如：</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> test </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">upper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;sunyang&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 这样的函数还有：to_char、to_date、to_number、trunc等</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>数据类型的转换，例如当<code>查询条件存在隐式转换</code>时，索引也会失效，比如在数据库中里id存number类型，但是在查询是，却用了下面的形式：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *  </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sunyang </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;123&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol>`,181)]))}const d=a(t,[["render",h],["__file","mysql复习.html.vue"]]),g=JSON.parse(`{"path":"/database/mysql/mysql%E5%A4%8D%E4%B9%A0.html","title":"Mysql复习","lang":"en-US","frontmatter":{"date":"2024-08-22T00:00:00.000Z","order":8,"category":["database"],"tag":["mysql"],"description":"Mysql复习 一、Mysql事务及特性 是来自下方的连接： ​ 数据库事务与MySQL事务总结 ​ 一文讲清楚MySQL事务隔离级别和实现原理，开发人员必备知识点 ​ 深入学习MySQL事务：ACID特性的实现原理 MySQL 事务 ​ 数据库事务指的是一组数据操作，事务内的操作要么就是全部成功，要么就是全部失败，什么都不做，其实不是没做，是可能做了...","head":[["meta",{"property":"og:url","content":"https://github.com/coderclsld/coderclsld.github.io/database/mysql/mysql%E5%A4%8D%E4%B9%A0.html"}],["meta",{"property":"og:site_name","content":"clsld 's blog"}],["meta",{"property":"og:title","content":"Mysql复习"}],["meta",{"property":"og:description","content":"Mysql复习 一、Mysql事务及特性 是来自下方的连接： ​ 数据库事务与MySQL事务总结 ​ 一文讲清楚MySQL事务隔离级别和实现原理，开发人员必备知识点 ​ 深入学习MySQL事务：ACID特性的实现原理 MySQL 事务 ​ 数据库事务指的是一组数据操作，事务内的操作要么就是全部成功，要么就是全部失败，什么都不做，其实不是没做，是可能做了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201003630-2050662608.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-09-09T02:58:56.000Z"}],["meta",{"property":"article:author","content":"clsld"}],["meta",{"property":"article:tag","content":"mysql"}],["meta",{"property":"article:published_time","content":"2024-08-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-09T02:58:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Mysql复习\\",\\"image\\":[\\"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201003630-2050662608.png\\",\\"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201011603-1317894910.png\\",\\"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201021606-1089980279.png\\",\\"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201103652-719570401.png\\",\\"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201111615-210490190.png\\",\\"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128200929607-1639664811.png\\",\\"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128200936671-1683619195.png\\",\\"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201126604-235257040.png\\",\\"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201139635-1779107964.png\\",\\"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201149661-1275460669.png\\",\\"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201206609-1998192060.png\\",\\"https://res-static.hc-cdn.cn/fms/img/e5e05b7b5cfd963c94c23a970564041f1603768896154\\",\\"https://res-static.hc-cdn.cn/fms/img/e4f43074b2ac347b63eb72413cc238d51603768896155\\",\\"https://res-static.hc-cdn.cn/fms/img/378a21cfaace770d4c2612f488e286d11603768896155\\",\\"https://res-static.hc-cdn.cn/fms/img/33e958b62244225ced7111c1dfd6d72b1603768896156\\",\\"https://upload-images.jianshu.io/upload_images/2392382-4996bbfb4017a3b2.png?imageMogr2/auto-orient/strip|imageView2/2/w/526/format/webp\\",\\"https://upload-images.jianshu.io/upload_images/2392382-abedf3ecc733ccd5.png?imageMogr2/auto-orient/strip|imageView2/2/w/772/format/webp\\",\\"https://upload-images.jianshu.io/upload_images/2392382-a95db442f1b47f8a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\",\\"https://upload-images.jianshu.io/upload_images/2392382-0676a8e2a12e2a0b.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp\\"],\\"datePublished\\":\\"2024-08-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-09T02:58:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"clsld\\",\\"url\\":\\"https://github.com/coderclsld\\"}]}"]]},"headers":[{"level":3,"title":"一、Mysql事务及特性","slug":"一、mysql事务及特性","link":"#一、mysql事务及特性","children":[]},{"level":3,"title":"二、MySQL主从复制","slug":"二、mysql主从复制","link":"#二、mysql主从复制","children":[]},{"level":3,"title":"三、各种树结构的比较","slug":"三、各种树结构的比较","link":"#三、各种树结构的比较","children":[]},{"level":3,"title":"四、索引失效","slug":"四、索引失效","link":"#四、索引失效","children":[]}],"git":{"createdTime":1675147913000,"updatedTime":1725850736000,"contributors":[{"name":"clsld","email":"807686672@qq.com","commits":1}]},"readingTime":{"minutes":33.58,"words":10074},"filePathRelative":"database/mysql/mysql复习.md","localizedDate":"August 22, 2024","excerpt":"\\n<h3>一、Mysql事务及特性</h3>\\n<p>是来自下方的连接：</p>\\n<p>​\\t\\t<a href=\\"https://zhuanlan.zhihu.com/p/29166694\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">数据库事务与MySQL事务总结</a></p>\\n<p>​\\t\\t<a href=\\"https://www.cnblogs.com/fengzheng/p/12557762.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">一文讲清楚MySQL事务隔离级别和实现原理，开发人员必备知识点</a></p>","autoDesc":true}`);export{d as comp,g as data};
