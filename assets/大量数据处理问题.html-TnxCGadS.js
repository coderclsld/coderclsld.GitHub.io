import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a,o}from"./app-C_wt19t6.js";const p={};function n(c,e){return o(),r("div",null,e[0]||(e[0]=[a('<h1 id="大量数据处理问题" tabindex="-1"><a class="header-anchor" href="#大量数据处理问题"><span>大量数据处理问题</span></a></h1><h3 id="_1、从大量url中寻找重复url" tabindex="-1"><a class="header-anchor" href="#_1、从大量url中寻找重复url"><span>1、从大量URL中寻找重复URL</span></a></h3><blockquote><p>1Kb = 1000B<br> 64B = 0.064Kb<br> 50 = 5 * 64G = 320G内存<br> 内存 8G 5G<br> 1000 part<br> 320M文件</p><p>存文件的一步进行处理<br> 判断文件大小，<br> URL stream<br> hash(url) % 1000</p><p>并行在64文件里面找</p><p>go 一个协程负责接收然后对其进行 hash，看有没有这个hash文件，创建文件</p></blockquote><h4 id="_2、在大量数据中寻找高频词" tabindex="-1"><a class="header-anchor" href="#_2、在大量数据中寻找高频词"><span>2、在大量数据中寻找高频词</span></a></h4><blockquote><p>分治</p><p>遍历文件使用map统计频数</p><p>使用小顶堆遍历文件频数</p><p>求最大topN用小顶堆，求最小topN用大顶堆</p></blockquote><h4 id="_3、在大量数据中找到不重复的数、或该数是否存在" tabindex="-1"><a class="header-anchor" href="#_3、在大量数据中找到不重复的数、或该数是否存在"><span>3、在大量数据中找到不重复的数、或该数是否存在</span></a></h4><blockquote><p>方法一 分治</p><p>拆分文件，在文件中找到不重复的数，最后合并子集</p><p>方法二 位图</p><p>两个位图数组，取模取余进行落子。</p></blockquote><h4 id="_4、从大量数据中找到中位数" tabindex="-1"><a class="header-anchor" href="#_4、从大量数据中找到中位数"><span>4、从大量数据中找到中位数</span></a></h4><blockquote><p>数据排序后，位置在最中间的数就是中位数。当样本数为奇数时，中位数为 第 <code>(N+1)/2</code> 个数；当样本数为偶数时，中位数为 第 <code>N/2</code> 个数与第 <code>1+N/2</code> 个数的均值。</p><p>对于这道题，顺序读取这 5 亿个数字，对于读取到的数字 num，如果它对应的二进制中最高位为1，则把这个数字写到 f1 中，否则写入 f0 中。通过这一步，可以把这 5 亿个数划分为两部分，而且 f0 中的数都大于 f1 中的数（最高位是符号位）。</p><p>划分之后，可以非常容易地知道中位数是在 f0 还是 f1 中。假设 f1 中有 1 亿个数，那么中位数一定在 f0 中，且是在 f0 中，从小到大排列的第 1.5 亿个数与它后面的一个数的平均值。对于 f0 可以用次高位的二进制继续将文件一分为二，如此划分下去，直到划分后的文件可以被加载到内存中，把数据加载到内存中以后直接排序，找出中位数。</p></blockquote>',9)]))}const i=t(p,[["render",n],["__file","大量数据处理问题.html.vue"]]),h=JSON.parse(`{"path":"/interview/%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98.html","title":"大量数据处理问题","lang":"en-US","frontmatter":{"date":"2024-08-22T00:00:00.000Z","order":99,"category":["interview"],"description":"大量数据处理问题 1、从大量URL中寻找重复URL 1Kb = 1000B 64B = 0.064Kb 50 = 5 * 64G = 320G内存 内存 8G 5G 1000 part 320M文件 存文件的一步进行处理 判断文件大小， URL stream hash(url) % 1000 并行在64文件里面找 go 一个协程负责接收然后对其进行 h...","head":[["meta",{"property":"og:url","content":"https://github.com/coderclsld/coderclsld.github.io/interview/%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"clsld 's blog"}],["meta",{"property":"og:title","content":"大量数据处理问题"}],["meta",{"property":"og:description","content":"大量数据处理问题 1、从大量URL中寻找重复URL 1Kb = 1000B 64B = 0.064Kb 50 = 5 * 64G = 320G内存 内存 8G 5G 1000 part 320M文件 存文件的一步进行处理 判断文件大小， URL stream hash(url) % 1000 并行在64文件里面找 go 一个协程负责接收然后对其进行 h..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-09-13T07:48:09.000Z"}],["meta",{"property":"article:author","content":"clsld"}],["meta",{"property":"article:published_time","content":"2024-08-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-13T07:48:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"大量数据处理问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-13T07:48:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"clsld\\",\\"url\\":\\"https://github.com/coderclsld\\"}]}"]]},"headers":[{"level":3,"title":"1、从大量URL中寻找重复URL","slug":"_1、从大量url中寻找重复url","link":"#_1、从大量url中寻找重复url","children":[]}],"git":{"createdTime":1677746885000,"updatedTime":1726213689000,"contributors":[{"name":"clsld","email":"807686672@qq.com","commits":1}]},"readingTime":{"minutes":1.76,"words":527},"filePathRelative":"interview/大量数据处理问题.md","localizedDate":"August 22, 2024","excerpt":"\\n<h3>1、从大量URL中寻找重复URL</h3>\\n<blockquote>\\n<p>1Kb = 1000B<br>\\n64B = 0.064Kb<br>\\n50 = 5   * 64G = 320G内存<br>\\n内存 8G 5G<br>\\n1000 part<br>\\n320M文件</p>\\n<p>存文件的一步进行处理<br>\\n判断文件大小，<br>\\nURL stream<br>\\nhash(url) % 1000</p>\\n<p>并行在64文件里面找</p>\\n<p>go 一个协程负责接收然后对其进行 hash，看有没有这个hash文件，创建文件</p>\\n</blockquote>\\n<h4>2、在大量数据中寻找高频词</h4>","autoDesc":true}`);export{i as comp,h as data};
