import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as l,a as o}from"./app-DevuHzse.js";const p={},c=o('<h1 id="select、poll、epoll" tabindex="-1"><a class="header-anchor" href="#select、poll、epoll"><span>select、poll、epoll</span></a></h1><h3 id="多路复用" tabindex="-1"><a class="header-anchor" href="#多路复用"><span>多路复用：</span></a></h3><p>多路指的是多个socket网络连接、复用指的是复用一个线程、多路复用主要有三种技术：select、poll、epoll，epoll</p><p>io多路复用是通过一种机制，一个进程可以监视多个描述符，一旦某个描述符就绪，能够通知程序相应的读写操作，但是select、poll、epoll本质上都是同步IO，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步IO则无需自己负责进行读写，异步IO的实现会负责把数据从内核拷贝到用户空间。</p><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select"><span>select</span></a></h3><p>select函数监视的文件描述符分为三类：分别是writefd、readfd、exceptfd，当用户进程调用select的时候，select会将需要监控的fds集合拷贝到内核空间，然后遍历自己监控的socket,挨个调用检查socket是否有可读事件，遍历完所有的socket后，如果没有任何一个socket可读，那么select会调用schedule_timeout进入schedule循环，然后使process进入睡眠。如果在timeout时间内的某个socket有数据可读了，则调用select的进程会被唤醒，接下来select遍历监控的socket，挨个收集可读事件并返回给用户。</p><h4 id="select存在三个问题" tabindex="-1"><a class="header-anchor" href="#select存在三个问题"><span>select存在三个问题：</span></a></h4><p>每次调用select，都需要把被监控的fds集合从用户态空间拷贝到内核态空间，高并发场景下这样的拷贝会消耗很多资源</p><p>能监听端口的数量有限，单个进程所能打开的最大连接数有FD_SETSIZE宏定义，其大小是32个整数的大小（在32位的机器上，大小就是3232，同理64位机器上为3264）</p><p>被监控的fds集合中，只要有一个数据可读，整个socket集合就会被遍历一次调用socket的poll函数收集可读事件。</p><h3 id="poll" tabindex="-1"><a class="header-anchor" href="#poll"><span>poll</span></a></h3><p>poll的实现和select非常相似，只是描述fd集合的方式不同，针对select的三个问题，poll使用了pollfd结构而不是select的fd_set结构就解决了select的集合大小限制问题，但是poll和select同样存在描述符需要从用户态复制到内核态的过程</p><h3 id="epoll" tabindex="-1"><a class="header-anchor" href="#epoll"><span>epoll</span></a></h3><p>在linux网络编程中，很长时间都在使用select来做事件触发。epoll相比于select和poll，最大的好处在于他不会随着fd数目的增长而降低效率，在内核中的select实现中，他是采用轮询来处理的，轮询的fd数目越多，耗时越多。</p><h3 id="三者之间的区别" tabindex="-1"><a class="header-anchor" href="#三者之间的区别"><span>三者之间的区别</span></a></h3><table><thead><tr><th></th><th>select</th><th>poll</th><th>epoll</th></tr></thead><tbody><tr><td>操作方式</td><td>遍历</td><td>遍历</td><td>回调</td></tr><tr><td>底层实现</td><td>数组</td><td>链表</td><td>哈希表</td></tr><tr><td>IO效率</td><td>每次迪奥哟你都进行线性遍历，时间复杂度为O(n)</td><td>每次调用都进行线性变量，时间复杂度为O(n)</td><td>事件通知方式，每当fd就绪，系统注册的回调函数就会被调用，将就绪fd放到rdllist里面，时间复杂度为O(1)</td></tr><tr><td>最大连接数</td><td>1024(x86)或2048(x64)</td><td>无上限</td><td>无上限</td></tr><tr><td>fd拷贝</td><td>每次调用select，都需要把fd集合从用户态拷贝到内核态</td><td>每次调用poll都需要把fd集合从用户态拷贝到内核态</td><td>调用epoll_ct拷贝进内核并保存，之后每次epoll_wait不拷贝。</td></tr></tbody></table><p>传统的select/poll的一个致命的弱点就是当你用友一个很大的socket集合，由于网络得延时，使得任一时间只有部分的socket是活跃的，而select/poll每次调用都会线性扫描全部的集合，导致效率呈线性下降。但是epoll就不存在这个问题，它只会对活跃的socket进行操作，这是因为在内核实现中epoll是根据每个fd上面的callback函数实现的，于是，只有活跃的socket才会主动去调用callback函数，其他的idle状态的socket则不会，在这点上，epoll实现了一个伪AIO。</p><h3 id="bio、nio、reactor模型" tabindex="-1"><a class="header-anchor" href="#bio、nio、reactor模型"><span>BIO、NIO、reactor模型</span></a></h3><p>BIO</p><p>同步阻塞IO，服务器实现一个连接一个线程，即客户端有连接请求时服务端就需要启动一个线程进行处理，没处理完之前的线程就不能做其他操作</p><p>NIO</p><p>同步非阻塞IO，服务端实现一个连接一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有io请求时才启动一个线程进行处理。NIO方式适用于连接数目多且连接比较短的架构</p><p>AIO</p><p>异步非阻塞IO，服务器实现模式为一个有效请求一个线程，客户端的IO请求都是由操作系统先完成了再通知服务器应用去启动线程进行处理，AIO的方式适用于连接数目多且连接比较长的架构</p>',24),s=[c];function a(d,r){return l(),t("div",null,s)}const h=e(p,[["render",a],["__file","select、poll、epoll.html.vue"]]),m=JSON.parse(`{"path":"/posts/linux/select%E3%80%81poll%E3%80%81epoll.html","title":"select、poll、epoll","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2024-08-22T00:00:00.000Z","category":["Linux"],"tag":["select","poll","epoll"],"description":"select、poll、epoll 多路复用： 多路指的是多个socket网络连接、复用指的是复用一个线程、多路复用主要有三种技术：select、poll、epoll，epoll io多路复用是通过一种机制，一个进程可以监视多个描述符，一旦某个描述符就绪，能够通知程序相应的读写操作，但是select、poll、epoll本质上都是同步IO，因为他们都需...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/linux/select%E3%80%81poll%E3%80%81epoll.html"}],["meta",{"property":"og:site_name","content":"Clsld 's blog"}],["meta",{"property":"og:title","content":"select、poll、epoll"}],["meta",{"property":"og:description","content":"select、poll、epoll 多路复用： 多路指的是多个socket网络连接、复用指的是复用一个线程、多路复用主要有三种技术：select、poll、epoll，epoll io多路复用是通过一种机制，一个进程可以监视多个描述符，一旦某个描述符就绪，能够通知程序相应的读写操作，但是select、poll、epoll本质上都是同步IO，因为他们都需..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-08-22T16:58:49.000Z"}],["meta",{"property":"article:author","content":"clsld"}],["meta",{"property":"article:tag","content":"select"}],["meta",{"property":"article:tag","content":"poll"}],["meta",{"property":"article:tag","content":"epoll"}],["meta",{"property":"article:published_time","content":"2024-08-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-22T16:58:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"select、poll、epoll\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-22T16:58:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"clsld\\",\\"url\\":\\"https://github.com/coderclsld\\"}]}"]]},"headers":[{"level":3,"title":"多路复用：","slug":"多路复用","link":"#多路复用","children":[]},{"level":3,"title":"select","slug":"select","link":"#select","children":[]},{"level":3,"title":"poll","slug":"poll","link":"#poll","children":[]},{"level":3,"title":"epoll","slug":"epoll","link":"#epoll","children":[]},{"level":3,"title":"三者之间的区别","slug":"三者之间的区别","link":"#三者之间的区别","children":[]},{"level":3,"title":"BIO、NIO、reactor模型","slug":"bio、nio、reactor模型","link":"#bio、nio、reactor模型","children":[]}],"git":{"createdTime":1675147913000,"updatedTime":1724345929000,"contributors":[{"name":"clsld","email":"807686672@qq.com","commits":1}]},"readingTime":{"minutes":4.29,"words":1287},"filePathRelative":"posts/linux/select、poll、epoll.md","localizedDate":"August 22, 2024","excerpt":"\\n<h3>多路复用：</h3>\\n<p>多路指的是多个socket网络连接、复用指的是复用一个线程、多路复用主要有三种技术：select、poll、epoll，epoll</p>\\n<p>io多路复用是通过一种机制，一个进程可以监视多个描述符，一旦某个描述符就绪，能够通知程序相应的读写操作，但是select、poll、epoll本质上都是同步IO，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步IO则无需自己负责进行读写，异步IO的实现会负责把数据从内核拷贝到用户空间。</p>\\n<h3>select</h3>\\n<p>select函数监视的文件描述符分为三类：分别是writefd、readfd、exceptfd，当用户进程调用select的时候，select会将需要监控的fds集合拷贝到内核空间，然后遍历自己监控的socket,挨个调用检查socket是否有可读事件，遍历完所有的socket后，如果没有任何一个socket可读，那么select会调用schedule_timeout进入schedule循环，然后使process进入睡眠。如果在timeout时间内的某个socket有数据可读了，则调用select的进程会被唤醒，接下来select遍历监控的socket，挨个收集可读事件并返回给用户。</p>","autoDesc":true}`);export{h as comp,m as data};
