import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,o as t}from"./app-C_wt19t6.js";const n={};function l(p,i){return t(),s("div",null,i[0]||(i[0]=[a(`<h1 id="mapreduce" tabindex="-1"><a class="header-anchor" href="#mapreduce"><span>MapReduce</span></a></h1><h3 id="什么是mapreduce" tabindex="-1"><a class="header-anchor" href="#什么是mapreduce"><span>什么是MapReduce</span></a></h3><p>MapReduce架构的程序能够在大量的普通配置的计算机上实现并行化处理。这个系统在运行时只关心：如何分割输入数据，在大量计算机组成的集群上的调度，集群中计算机的错误处理，管理集群中计算机之间必要的通信。</p><p>在输入数据的“逻辑”记录上应用Map操作得出一个中间key/value pair集合，然后在所有具有相同key值的value值上应用Reduce操作，从而达到合并中间的数据，得到一个想要的结果的目的。使用MapReduce模型，再结合用户实现的Map和Reduce函数，我们就可以非常容易的实现大规模并行化计算；通过MapReduce模型自带的“再次执行”（re-execution）功能，也提供了初级的容灾实现方案。</p><p>例如，计算一个大的文档集合中每个单词出现的次数，下面是伪代码段：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(String key,String value):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> each word w </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> value:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">		EmitIntermediate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(w,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#000000;--shiki-dark:#FFFFFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">reduce</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(String key,Iterator values):</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  	int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#000000;--shiki-dark:#FFFFFF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> each v </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> values:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> ParseInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(v)</span><span style="--shiki-light:#000000;--shiki-dark:#FFFFFF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    Emit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">AsString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result))</span><span style="--shiki-light:#000000;--shiki-dark:#FFFFFF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Map和Reduce函数相关联的类型:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(k1,v1) </span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">-&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(k2,v2)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">reduce</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(k2,</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(v2)) </span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">-&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(v2)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lab1学习与实现" tabindex="-1"><a class="header-anchor" href="#lab1学习与实现"><span>lab1学习与实现</span></a></h3><p>target</p><p>实现分布式MapReduce，一个coordinate，一个worker，worker通过rpc和coordinate交互，worker请求任务，进行运算，写出结果到文件，coordinate需要关心worker是否完成任务，在超时的情况下将任务重新分配给其他worker</p>`,11)]))}const d=e(n,[["render",l],["__file","MapReduce.html.vue"]]),k=JSON.parse(`{"path":"/planlearn/MapReduce.html","title":"MapReduce","lang":"en-US","frontmatter":{"date":"2024-08-22T00:00:00.000Z","category":["planlearn"],"tag":["MapReduce"],"description":"MapReduce 什么是MapReduce MapReduce架构的程序能够在大量的普通配置的计算机上实现并行化处理。这个系统在运行时只关心：如何分割输入数据，在大量计算机组成的集群上的调度，集群中计算机的错误处理，管理集群中计算机之间必要的通信。 在输入数据的“逻辑”记录上应用Map操作得出一个中间key/value pair集合，然后在所有具有相...","head":[["meta",{"property":"og:url","content":"https://github.com/coderclsld/coderclsld.github.io/planlearn/MapReduce.html"}],["meta",{"property":"og:site_name","content":"clsld 's blog"}],["meta",{"property":"og:title","content":"MapReduce"}],["meta",{"property":"og:description","content":"MapReduce 什么是MapReduce MapReduce架构的程序能够在大量的普通配置的计算机上实现并行化处理。这个系统在运行时只关心：如何分割输入数据，在大量计算机组成的集群上的调度，集群中计算机的错误处理，管理集群中计算机之间必要的通信。 在输入数据的“逻辑”记录上应用Map操作得出一个中间key/value pair集合，然后在所有具有相..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-09-09T02:58:56.000Z"}],["meta",{"property":"article:author","content":"clsld"}],["meta",{"property":"article:tag","content":"MapReduce"}],["meta",{"property":"article:published_time","content":"2024-08-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-09T02:58:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MapReduce\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-09T02:58:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"clsld\\",\\"url\\":\\"https://github.com/coderclsld\\"}]}"]]},"headers":[{"level":3,"title":"什么是MapReduce","slug":"什么是mapreduce","link":"#什么是mapreduce","children":[]},{"level":3,"title":"lab1学习与实现","slug":"lab1学习与实现","link":"#lab1学习与实现","children":[]}],"git":{"createdTime":1675147913000,"updatedTime":1725850736000,"contributors":[{"name":"clsld","email":"807686672@qq.com","commits":1}]},"readingTime":{"minutes":1.32,"words":397},"filePathRelative":"planlearn/MapReduce.md","localizedDate":"August 22, 2024","excerpt":"\\n<h3>什么是MapReduce</h3>\\n<p>MapReduce架构的程序能够在大量的普通配置的计算机上实现并行化处理。这个系统在运行时只关心：如何分割输入数据，在大量计算机组成的集群上的调度，集群中计算机的错误处理，管理集群中计算机之间必要的通信。</p>\\n<p>在输入数据的“逻辑”记录上应用Map操作得出一个中间key/value pair集合，然后在所有具有相同key值的value值上应用Reduce操作，从而达到合并中间的数据，得到一个想要的结果的目的。使用MapReduce模型，再结合用户实现的Map和Reduce函数，我们就可以非常容易的实现大规模并行化计算；通过MapReduce模型自带的“再次执行”（re-execution）功能，也提供了初级的容灾实现方案。</p>","autoDesc":true}`);export{d as comp,k as data};
