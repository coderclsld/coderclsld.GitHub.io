(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{547:function(_,t,v){"use strict";v.r(t);var a=v(1),r=Object(a.a)({},(function(){var _=this,t=_.$createElement,v=_._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"大量数据处理问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#大量数据处理问题"}},[_._v("#")]),_._v(" 大量数据处理问题")]),_._v(" "),v("h3",{attrs:{id:"_1、从大量url中寻找重复url"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、从大量url中寻找重复url"}},[_._v("#")]),_._v(" 1、从大量URL中寻找重复URL")]),_._v(" "),v("blockquote",[v("p",[_._v("1Kb = 1000B\n64B = 0.064Kb\n50 = 5   * 64G = 320G内存\n内存 8G 5G\n1000 part\n320M文件")]),_._v(" "),v("p",[_._v("存文件的一步进行处理\n判断文件大小，\nURL stream\nhash(url) % 1000")]),_._v(" "),v("p",[_._v("并行在64文件里面找")]),_._v(" "),v("p",[_._v("go 一个协程负责接收然后对其进行 hash，看有没有这个hash文件，创建文件")])]),_._v(" "),v("h4",{attrs:{id:"_2、在大量数据中寻找高频词"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、在大量数据中寻找高频词"}},[_._v("#")]),_._v(" 2、在大量数据中寻找高频词")]),_._v(" "),v("blockquote",[v("p",[_._v("分治")]),_._v(" "),v("p",[_._v("遍历文件使用map统计频数")]),_._v(" "),v("p",[_._v("使用小顶堆遍历文件频数")]),_._v(" "),v("p",[_._v("求最大topN用小顶堆，求最小topN用大顶堆")])]),_._v(" "),v("h4",{attrs:{id:"_3、在大量数据中找到不重复的数、或该数是否存在"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3、在大量数据中找到不重复的数、或该数是否存在"}},[_._v("#")]),_._v(" 3、在大量数据中找到不重复的数、或该数是否存在")]),_._v(" "),v("blockquote",[v("p",[_._v("方法一 分治")]),_._v(" "),v("p",[_._v("拆分文件，在文件中找到不重复的数，最后合并子集")]),_._v(" "),v("p",[_._v("方法二 位图")]),_._v(" "),v("p",[_._v("两个位图数组，取模取余进行落子。")])]),_._v(" "),v("h4",{attrs:{id:"_4、从大量数据中找到中位数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4、从大量数据中找到中位数"}},[_._v("#")]),_._v(" 4、从大量数据中找到中位数")]),_._v(" "),v("blockquote",[v("p",[_._v("数据排序后，位置在最中间的数就是中位数。当样本数为奇数时，中位数为 第 "),v("code",[_._v("(N+1)/2")]),_._v(" 个数；当样本数为偶数时，中位数为 第 "),v("code",[_._v("N/2")]),_._v(" 个数与第 "),v("code",[_._v("1+N/2")]),_._v(" 个数的均值。")]),_._v(" "),v("p",[_._v("对于这道题，顺序读取这 5 亿个数字，对于读取到的数字 num，如果它对应的二进制中最高位为1，则把这个数字写到 f1 中，否则写入 f0 中。通过这一步，可以把这 5 亿个数划分为两部分，而且 f0 中的数都大于 f1 中的数（最高位是符号位）。")]),_._v(" "),v("p",[_._v("划分之后，可以非常容易地知道中位数是在 f0 还是 f1 中。假设 f1 中有 1 亿个数，那么中位数一定在 f0 中，且是在 f0 中，从小到大排列的第 1.5 亿个数与它后面的一个数的平均值。对于 f0 可以用次高位的二进制继续将文件一分为二，如此划分下去，直到划分后的文件可以被加载到内存中，把数据加载到内存中以后直接排序，找出中位数。")])])])}),[],!1,null,null,null);t.default=r.exports}}]);