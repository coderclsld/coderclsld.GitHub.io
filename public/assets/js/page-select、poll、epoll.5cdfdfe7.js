(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{508:function(t,e,l){"use strict";l.r(e);var _=l(2),s=Object(_.a)({},(function(){var t=this,e=t.$createElement,l=t._self._c||e;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h2",{attrs:{id:"select、poll、epoll"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#select、poll、epoll"}},[t._v("#")]),t._v(" select、poll、epoll")]),t._v(" "),l("h3",{attrs:{id:"多路复用"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#多路复用"}},[t._v("#")]),t._v(" 多路复用：")]),t._v(" "),l("p",[t._v("多路指的是多个socket网络连接、复用指的是复用一个线程、多路复用主要有三种技术：select、poll、epoll，epoll")]),t._v(" "),l("p",[t._v("io多路复用是通过一种机制，一个进程可以监视多个描述符，一旦某个描述符就绪，能够通知程序相应的读写操作，但是select、poll、epoll本质上都是同步IO，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步IO则无需自己负责进行读写，异步IO的实现会负责把数据从内核拷贝到用户空间。")]),t._v(" "),l("h3",{attrs:{id:"select"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#select"}},[t._v("#")]),t._v(" select")]),t._v(" "),l("p",[t._v("select函数监视的文件描述符分为三类：分别是writefd、readfd、exceptfd，当用户进程调用select的时候，select会将需要监控的fds集合拷贝到内核空间，然后遍历自己监控的socket,挨个调用检查socket是否有可读事件，遍历完所有的socket后，如果没有任何一个socket可读，那么select会调用schedule_timeout进入schedule循环，然后使process进入睡眠。如果在timeout时间内的某个socket有数据可读了，则调用select的进程会被唤醒，接下来select遍历监控的socket，挨个收集可读事件并返回给用户。")]),t._v(" "),l("h4",{attrs:{id:"select存在三个问题"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#select存在三个问题"}},[t._v("#")]),t._v(" select存在三个问题：")]),t._v(" "),l("p",[t._v("每次调用select，都需要把被监控的fds集合从用户态空间拷贝到内核态空间，高并发场景下这样的拷贝会消耗很多资源")]),t._v(" "),l("p",[t._v("能监听端口的数量有限，单个进程所能打开的最大连接数有FD_SETSIZE宏定义，其大小是32个整数的大小（在32位的机器上，大小就是3232，同理64位机器上为3264）")]),t._v(" "),l("p",[t._v("被监控的fds集合中，只要有一个数据可读，整个socket集合就会被遍历一次调用socket的poll函数收集可读事件。")]),t._v(" "),l("h3",{attrs:{id:"poll"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#poll"}},[t._v("#")]),t._v(" poll")]),t._v(" "),l("p",[t._v("poll的实现和select非常相似，只是描述fd集合的方式不同，针对select的三个问题，poll使用了pollfd结构而不是select的fd_set结构就解决了select的集合大小限制问题，但是poll和select同样存在描述符需要从用户态复制到内核态的过程")]),t._v(" "),l("h3",{attrs:{id:"epoll"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#epoll"}},[t._v("#")]),t._v(" epoll")]),t._v(" "),l("p",[t._v("在linux网络编程中，很长时间都在使用select来做事件触发。epoll相比于select和poll，最大的好处在于他不会随着fd数目的增长而降低效率，在内核中的select实现中，他是采用轮询来处理的，轮询的fd数目越多，耗时越多。")]),t._v(" "),l("h3",{attrs:{id:"三者之间的区别"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#三者之间的区别"}},[t._v("#")]),t._v(" 三者之间的区别")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th"),t._v(" "),l("th",[t._v("select")]),t._v(" "),l("th",[t._v("poll")]),t._v(" "),l("th",[t._v("epoll")])])]),t._v(" "),l("tbody",[l("tr",[l("td",[t._v("操作方式")]),t._v(" "),l("td",[t._v("遍历")]),t._v(" "),l("td",[t._v("遍历")]),t._v(" "),l("td",[t._v("回调")])]),t._v(" "),l("tr",[l("td",[t._v("底层实现")]),t._v(" "),l("td",[t._v("数组")]),t._v(" "),l("td",[t._v("链表")]),t._v(" "),l("td",[t._v("哈希表")])]),t._v(" "),l("tr",[l("td",[t._v("IO效率")]),t._v(" "),l("td",[t._v("每次迪奥哟你都进行线性遍历，时间复杂度为O(n)")]),t._v(" "),l("td",[t._v("每次调用都进行线性变量，时间复杂度为O(n)")]),t._v(" "),l("td",[t._v("事件通知方式，每当fd就绪，系统注册的回调函数就会被调用，将就绪fd放到rdllist里面，时间复杂度为O(1)")])]),t._v(" "),l("tr",[l("td",[t._v("最大连接数")]),t._v(" "),l("td",[t._v("1024(x86)或2048(x64)")]),t._v(" "),l("td",[t._v("无上限")]),t._v(" "),l("td",[t._v("无上限")])]),t._v(" "),l("tr",[l("td",[t._v("fd拷贝")]),t._v(" "),l("td",[t._v("每次调用select，都需要把fd集合从用户态拷贝到内核态")]),t._v(" "),l("td",[t._v("每次调用poll都需要把fd集合从用户态拷贝到内核态")]),t._v(" "),l("td",[t._v("调用epoll_ct拷贝进内核并保存，之后每次epoll_wait不拷贝。")])])])]),t._v(" "),l("p",[t._v("传统的select/poll的一个致命的弱点就是当你用友一个很大的socket集合，由于网络得延时，使得任一时间只有部分的socket是活跃的，而select/poll每次调用都会线性扫描全部的集合，导致效率呈线性下降。但是epoll就不存在这个问题，它只会对活跃的socket进行操作，这是因为在内核实现中epoll是根据每个fd上面的callback函数实现的，于是，只有活跃的socket才会主动去调用callback函数，其他的idle状态的socket则不会，在这点上，epoll实现了一个伪AIO。")]),t._v(" "),l("h3",{attrs:{id:"bio、nio、reactor模型"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#bio、nio、reactor模型"}},[t._v("#")]),t._v(" BIO、NIO、reactor模型")]),t._v(" "),l("p",[t._v("BIO")]),t._v(" "),l("p",[t._v("同步阻塞IO，服务器实现一个连接一个线程，即客户端有连接请求时服务端就需要启动一个线程进行处理，没处理完之前的线程就不能做其他操作")]),t._v(" "),l("p",[t._v("NIO")]),t._v(" "),l("p",[t._v("同步非阻塞IO，服务端实现一个连接一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有io请求时才启动一个线程进行处理。NIO方式适用于连接数目多且连接比较短的架构")]),t._v(" "),l("p",[t._v("AIO")]),t._v(" "),l("p",[t._v("异步非阻塞IO，服务器实现模式为一个有效请求一个线程，客户端的IO请求都是由操作系统先完成了再通知服务器应用去启动线程进行处理，AIO的方式适用于连接数目多且连接比较长的架构")])])}),[],!1,null,null,null);e.default=s.exports}}]);