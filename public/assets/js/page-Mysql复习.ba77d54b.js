(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{232:function(s,t,a){s.exports=a.p+"assets/img/1174710-20190128200647649-2138221098.0017464e.png"},510:function(s,t,a){"use strict";a.r(t);var e=a(2),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"mysql复习"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql复习"}},[s._v("#")]),s._v(" Mysql复习")]),s._v(" "),e("h3",{attrs:{id:"一、mysql事务及特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、mysql事务及特性"}},[s._v("#")]),s._v(" 一、Mysql事务及特性")]),s._v(" "),e("p",[s._v("是来自下方的连接：")]),s._v(" "),e("p",[s._v("​\t\t"),e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/29166694",target:"_blank",rel:"noopener noreferrer"}},[s._v("数据库事务与MySQL事务总结"),e("OutboundLink")],1)]),s._v(" "),e("p",[s._v("​\t\t"),e("a",{attrs:{href:"https://www.cnblogs.com/fengzheng/p/12557762.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("一文讲清楚MySQL事务隔离级别和实现原理，开发人员必备知识点"),e("OutboundLink")],1)]),s._v(" "),e("p",[s._v("​\t\t"),e("a",{attrs:{href:"https://www.cnblogs.com/kismetv/p/10331633.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("深入学习MySQL事务：ACID特性的实现原理"),e("OutboundLink")],1)]),s._v(" "),e("h4",{attrs:{id:"mysql-事务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql-事务"}},[s._v("#")]),s._v(" MySQL 事务")]),s._v(" "),e("p",[s._v("​\t\t数据库事务指的是一组数据操作，事务内的操作要么就是全部成功，要么就是全部失败，什么都不做，其实不是没做，是可能做了一部分但是只要有一步失败，就要回滚所有操作")]),s._v(" "),e("p",[s._v("​\t\t事务具有原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）四个特性，简称 "),e("code",[s._v("ACID")]),s._v("，缺一不可。")]),s._v(" "),e("h4",{attrs:{id:"一、逻辑架构和存储引擎"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、逻辑架构和存储引擎"}},[s._v("#")]),s._v(" 一、逻辑架构和存储引擎")]),s._v(" "),e("p",[e("img",{attrs:{src:a(232),alt:"img"}})]),s._v(" "),e("blockquote",[e("p",[s._v("​\t\tMySQL服务器逻辑架构从上往下可以分为三层：")]),s._v(" "),e("p",[s._v("（1）第一层：处理客户端连接、授权认证等。")]),s._v(" "),e("p",[s._v("（2）第二层：服务器层，负责查询语句的解析、优化、缓存以及内置函数的实现、存储过程等。")]),s._v(" "),e("p",[s._v("（3）第三层：存储引擎，负责MySQL中数据的存储和提取。"),e("strong",[s._v("MySQL")]),s._v("中服务器层不管理事务，事务是由存储引擎实现的。**MySQL支持事务的存储引擎有InnoDB、NDB Cluster等，其中InnoDB的使用最为广泛；其他存储引擎不支持事务，如MyIsam、Memory等。")])]),s._v(" "),e("h4",{attrs:{id:"二、提交和回滚"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、提交和回滚"}},[s._v("#")]),s._v(" 二、提交和回滚")]),s._v(" "),e("p",[s._v("​\t\t典型的MySQL事务是如下操作的：")]),s._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("start")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transaction")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#一条或多条sql语句")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("commit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("​\t\tstart transaction标识事务开始，commit提交事务，将执行结果写入到数据库。如果sql语句执行出现问题，会调用rollback，回滚所有已经执行成功的sql语句。")]),s._v(" "),e("h4",{attrs:{id:"自动提交"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动提交"}},[s._v("#")]),s._v(" "),e("strong",[s._v("自动提交")])]),s._v(" "),e("p",[s._v("​\t\tMySQL中默认采用的是自动提交（autocommit）模式:")]),s._v(" "),e("p",[e("img",{attrs:{src:a(232),alt:"img"}})]),s._v(" "),e("p",[s._v("​\t\t在自动提交模式下，如果没有start transaction显式地开始一个事务，那么每个sql语句都会被当做一个事务执行提交操作。")]),s._v(" "),e("p",[s._v("​\t\t通过如下方式，可以关闭autocommit；需要注意的是，autocommit参数是针对连接的，在一个连接中修改了参数，不会对其他连接产生影响。")]),s._v(" "),e("p",[e("img",{attrs:{src:a(232),alt:"img"}})]),s._v(" "),e("p",[s._v("​\t\t如果关闭了autocommit，则所有的sql语句都在一个事务中，直到执行了commit或rollback，该事务结束，同时开始了另外一个事务。")]),s._v(" "),e("h4",{attrs:{id:"特殊操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#特殊操作"}},[s._v("#")]),s._v(" "),e("strong",[s._v("特殊操作")])]),s._v(" "),e("p",[s._v("​\t\t在MySQL中，存在一些特殊的命令，如果在事务中执行了这些命令，会马上强制执行commit提交事务；如DDL语句(create table/drop table/alter/table)、lock tables语句等等。")]),s._v(" "),e("p",[s._v("不过，常用的select、insert、update和delete命令，都不会强制提交事务。")]),s._v(" "),e("h4",{attrs:{id:"特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[s._v("#")]),s._v(" 特性")]),s._v(" "),e("h5",{attrs:{id:"一、隔离性-isolation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、隔离性-isolation"}},[s._v("#")]),s._v(" 一、隔离性（Isolation）")]),s._v(" "),e("h6",{attrs:{id:"_1-定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义"}},[s._v("#")]),s._v(" 1. 定义")]),s._v(" "),e("blockquote",[e("p",[s._v("​\t\t**与原子性、持久性侧重于研究事务本身不同，隔离性研究的是不同事务之间的相互影响。**隔离性是指，事务内部的操作与其他事务是隔离的，并发执行的各个事务之间不能互相干扰。严格的隔离性，对应了事务隔离级别中的Serializable (可串行化)，但实际应用中出于性能方面的考虑很少会使用可串行化。")]),s._v(" "),e("p",[s._v("​\t\t隔离性追求的是并发情形下事务之间互不干扰。简单起见，我们主要考虑最简单的读操作和写操作(加锁读等特殊读操作会特殊说明)，那么隔离性的探讨，主要可以分为两个方面：")]),s._v(" "),e("ul",[e("li",[s._v("(一个事务)写操作对(另一个事务)写操作的影响：锁机制保证隔离性")]),s._v(" "),e("li",[s._v("(一个事务)写操作对(另一个事务)读操作的影响：MVCC保证隔离性")])])]),s._v(" "),e("h6",{attrs:{id:"_2、概念说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、概念说明"}},[s._v("#")]),s._v(" 2、概念说明")]),s._v(" "),e("blockquote",[e("h6",{attrs:{id:"脏读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#脏读"}},[s._v("#")]),s._v(" 脏读")]),s._v(" "),e("p",[s._v("​\t\t当前事务(A)中可以读到其他事务(B)未提交的数据（脏数据）。一个事务在执行过程中可以读到其他事务改变了但是没有提交的数据即其他事务没有提交的数据我可以读到。")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201003630-2050662608.png",alt:"img"}})]),s._v(" "),e("h6",{attrs:{id:"可重复读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可重复读"}},[s._v("#")]),s._v(" 可重复读")]),s._v(" "),e("p",[s._v("​\t\t可重复读指的是在一个事务内，最开始读到的数据和事务结束前的任意时刻读到的同一批数据都是一致的。通常针对数据**更新（UPDATE）**操作。数据不管在我这个事务开始的时候是什么样子就是什么样子，不管其他事务有没有在执行过程中修改了数据的内容。")]),s._v(" "),e("h6",{attrs:{id:"不可重复读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不可重复读"}},[s._v("#")]),s._v(" 不可重复读")]),s._v(" "),e("p",[s._v("​\t\t在事务A中先后两次读取同一个数据，两次读取的结果不一样，这种现象称为不可重复读。脏读与不可重复读的区别在于：前者读到的是其他事务未提交的数据，后者读到的是其他事务已提交的数据。即和可重读的区别就是，可重读就算在执行期间有其他事务的提交再次读时得到的还是在此事务开始执行前的值。举例如下：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201011603-1317894910.png",alt:"img"}})]),s._v(" "),e("h6",{attrs:{id:"幻读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#幻读"}},[s._v("#")]),s._v(" 幻读")]),s._v(" "),e("p",[s._v("​\t\t在事务A中按照某个条件先后两次查询数据库，两次查询结果的条数不同，这种现象称为幻读。不可重复读与幻读的区别可以通俗的理解为：前者是数据变了，后者是数据的行数变了。举例如下：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201021606-1089980279.png",alt:"img"}})])]),s._v(" "),e("h6",{attrs:{id:"_3、事务隔离级别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、事务隔离级别"}},[s._v("#")]),s._v(" 3、事务隔离级别")]),s._v(" "),e("blockquote",[e("p",[s._v("​\t\tSQL 标准定义了四种隔离级别，MySQL 全都支持。这四种隔离级别分别是：")]),s._v(" "),e("ol",[e("li",[e("p",[e("code",[s._v("读未提交（READ UNCOMMITTED）")])])]),s._v(" "),e("li",[e("p",[e("code",[s._v("读提交 （READ COMMITTED）")])])]),s._v(" "),e("li",[e("p",[e("code",[s._v("可重复读 （REPEATABLE READ）")])])]),s._v(" "),e("li",[e("p",[e("code",[s._v("串行化 （SERIALIZABLE）")])]),s._v(" "),e("p",[s._v("​\t从上往下，隔离强度"),e("strong",[s._v("逐渐增强")]),s._v("，性能逐渐变差。采用哪种隔离级别要根据系统需求权衡决定，其中，"),e("strong",[s._v("可重复读")]),s._v("是 MySQL 的默认级别。")]),s._v(" "),e("p",[s._v("​\t事务隔离其实就是为了"),e("strong",[s._v("解决")]),s._v("上面提到的脏读、不可重复读、幻读这几个问题，下面展示了 4 种隔离级别对这三个问题的解决程度。")])])]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[s._v("隔离级别")])]),s._v(" "),e("th",[e("strong",[s._v("脏读")])]),s._v(" "),e("th",[e("strong",[s._v("不可重复读")])]),s._v(" "),e("th",[e("strong",[s._v("幻读")])])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("读未提交")]),s._v(" "),e("td",[s._v("可能")]),s._v(" "),e("td",[s._v("可能")]),s._v(" "),e("td",[s._v("可能")])]),s._v(" "),e("tr",[e("td",[s._v("读提交")]),s._v(" "),e("td",[s._v("不可能")]),s._v(" "),e("td",[s._v("可能")]),s._v(" "),e("td",[s._v("可能")])]),s._v(" "),e("tr",[e("td",[s._v("可重复读")]),s._v(" "),e("td",[s._v("不可能")]),s._v(" "),e("td",[s._v("不可能")]),s._v(" "),e("td",[s._v("可能")])]),s._v(" "),e("tr",[e("td",[s._v("串行化")]),s._v(" "),e("td",[s._v("不可能")]),s._v(" "),e("td",[s._v("不可能")]),s._v(" "),e("td",[s._v("不可能")])])])]),s._v(" "),e("p",[s._v("​\t\t只有串行化的隔离级别解决了全部这 3 个问题，其他的 3 个隔离级别都有缺陷。")]),s._v(" "),e("p",[s._v("​\t\t在实际应用中，"),e("strong",[s._v("读未提交")]),s._v("在并发时会导致很多问题，而性能相对于其他隔离级别提高却很有限，因此使用较少。"),e("strong",[s._v("可串行化")]),s._v("强制事务串行，并发效率很低，只有当对数据一致性要求极高且可以接受没有并发时使用，因此使用也较少。因此在大多数数据库系统中，默认的隔离级别是"),e("strong",[s._v("读已提交")]),s._v("(如Oracle)"),e("strong",[s._v("或")]),s._v("可重复读（后文简称RR）。")]),s._v(" "),e("p",[s._v("​\t\t可以通过如下两个命令分别查看全局隔离级别和本次会话的隔离级别：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201103652-719570401.png",alt:"img"}}),e("img",{attrs:{src:"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201111615-210490190.png",alt:"img"}})]),s._v(" "),e("p",[s._v("​\t\t在SQL标准中，RR是无法避免幻读问题的，但是InnoDB实现的RR避免了幻读问题。")])]),s._v(" "),e("h6",{attrs:{id:"_4、锁机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、锁机制"}},[s._v("#")]),s._v(" 4、锁机制")]),s._v(" "),e("p",[s._v("隔离性要求同一时刻只能有一个事务对数据进行写操作，InnoDB通过锁机制来保证这一点。")]),s._v(" "),e("p",[s._v("锁机制的基本原理可以概括为：事务在修改数据之前，需要先获得相应的锁；获得锁之后，事务便可以修改数据；该事务操作期间，这部分数据是锁定的，其他事务如果需要修改数据，需要等待当前事务提交或回滚后释放锁。")]),s._v(" "),e("blockquote",[e("h6",{attrs:{id:"行锁与表锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#行锁与表锁"}},[s._v("#")]),s._v(" "),e("strong",[s._v("行锁与表锁")])]),s._v(" "),e("p",[s._v("​\t\t按照粒度，锁可以分为表锁、行锁以及其他位于二者之间的锁。表锁在操作数据时会锁定整张表，并发性能较差；行锁则只锁定需要操作的数据，并发性能好。但是由于加锁本身需要消耗资源(获得锁、检查锁、释放锁等都需要消耗资源)，因此在锁定数据较多情况下使用表锁可以节省大量资源。MySQL中不同的存储引擎支持的锁是不一样的，例如MyIsam只支持表锁，而InnoDB同时支持表锁和行锁，且出于性能考虑，绝大多数情况下使用的都是行锁。")]),s._v(" "),e("h6",{attrs:{id:"查看锁信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看锁信息"}},[s._v("#")]),s._v(" "),e("strong",[s._v("查看锁信息")])]),s._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#锁的概况")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" information_schema"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("innodb_locks"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Innodb整体的状态，其中包括锁的情况")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("engine")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("innodb")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("​\t\t一个例子：")]),s._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#在事务A中执行")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("start")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transaction")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#在事务B中执行")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("start")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transaction")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("update")]),s._v(" accout "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" balance "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("​\t\t查看锁的情况：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128200929607-1639664811.png",alt:"img"}})]),s._v(" "),e("p",[s._v("​\t\tshow engine innodb status查看锁相关的部分：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128200936671-1683619195.png",alt:"img"}})]),s._v(" "),e("p",[s._v("​\t\t通过上述命令可以查看事务24052和24053占用锁的情况；其中lock_type为RECORD，代表锁为行锁(记录锁)；lock_mode为X，代表排它锁(写锁)。")])]),s._v(" "),e("h6",{attrs:{id:"_5、mvcc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、mvcc"}},[s._v("#")]),s._v(" 5、MVCC")]),s._v(" "),e("h6",{attrs:{id:"mvcc在mysql中的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvcc在mysql中的实现"}},[s._v("#")]),s._v(" MVCC在mysql中的实现")]),s._v(" "),e("p",[s._v("在Innodb中，会在每行数据后添加两个额外的隐藏值来实现mvcc，这两个值一个记录这行数据何时被创建，一个记录这行数据何时过期或者被删除。在实际操作中，存储的并不是时间，而是事务的版本号，每开启一个新的事务，事务的版本号就会递增，在可重读Repeatable read事务隔离级别下：")]),s._v(" "),e("ul",[e("li",[s._v("select时，读取创建版本号 <= 当前版本号，删除版本号为空 或 > 当前事务版本号")]),s._v(" "),e("li",[s._v("insert时，保存当前事务版本号为行的创建版本号")]),s._v(" "),e("li",[s._v("delete时，保存当前事务版本号为行的删除版本号")]),s._v(" "),e("li",[s._v("update时，插入一条新记录，保存当前事务版本号为行创建版本号，同时保存当前事务版本号到原来删除的行。")])]),s._v(" "),e("p",[s._v("通过mvcc虽然每行记录都需要额外的存储空间，更多的行检查工作以及一些额外的维护工作，但可以减少锁的使用，大多数读操作都不用加锁，读数据操作很简单，性能很好，并且也能保证只读取到符合标准的行，也只锁住必要的行。")]),s._v(" "),e("p",[s._v("​\t\tRR解决脏读、不可重复读、幻读等问题，使用的是MVCC：MVCC全称Multi-Version Concurrency Control，即多版本的并发控制协议。下面的例子很好的体现了MVCC的特点：在同一时刻，不同的事务读取到的数据可能是不同的(即多版本)——在T5时刻，事务A和事务C可以读取到不同版本的数据。")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201126604-235257040.png",alt:"img"}})]),s._v(" "),e("p",[s._v("​\t\tMVCC最大的优点是读不加锁，因此读写不冲突，并发性能好。InnoDB实现MVCC，多个版本的数据可以共存，主要基于以下技术及数据结构：")]),s._v(" "),e("blockquote",[e("p",[s._v("1）隐藏列：InnoDB中每行数据都有隐藏列，隐藏列中包含了本行数据的"),e("code",[s._v("事务id")]),s._v("、"),e("code",[s._v("指向undo log的指针")]),s._v("等。")]),s._v(" "),e("p",[s._v("2）基于undo log的版本链：前面说到每行数据的隐藏列中包含了指向undo log的指针，而每条undo log也会指向更早版本的undo log，从而形成一条版本链。")]),s._v(" "),e("p",[s._v("3）ReadView：通过隐藏列和版本链，MySQL可以将数据恢复到指定版本；但是具体要恢复到哪个版本，则需要根据ReadView来确定。所谓ReadView，是指事务（记做事务A）在某一时刻给整个事务系统（trx_sys）打快照，之后再进行读操作时，会将读取到的数据中的事务id与trx_sys快照比较，从而判断数据对该ReadView是否可见，即对事务A是否可见。")]),s._v(" "),e("blockquote",[e("p",[s._v("trx_sys中的主要内容，以及判断可见性的方法如下：")]),s._v(" "),e("ul",[e("li",[s._v("low_limit_id：表示生成ReadView时系统中应该分配给下一个事务的id。如果数据的事务id大于等于low_limit_id，则对该ReadView不可见。")]),s._v(" "),e("li",[s._v("up_limit_id：表示生成ReadView时当前系统中活跃的读写事务中最小的事务id。如果数据的事务id小于up_limit_id，则对该ReadView可见。")]),s._v(" "),e("li",[s._v("rw_trx_ids：表示生成ReadView时当前系统中活跃的读写事务的事务id列表。如果数据的事务id在low_limit_id和up_limit_id之间，则需要判断事务id是否在rw_trx_ids中：如果在，说明生成ReadView时事务仍在活跃中，因此数据对ReadView不可见；如果不在，说明生成ReadView时事务已经提交了，因此数据对ReadView可见。")])])])]),s._v(" "),e("p",[s._v("下面以RR隔离级别为例，结合前文提到的几个问题分别说明。")]),s._v(" "),e("h6",{attrs:{id:"_1-脏读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-脏读"}},[s._v("#")]),s._v(" （1）脏读")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201139635-1779107964.png",alt:"img"}})]),s._v(" "),e("p",[s._v("​\t\t当事务A在T3时刻读取zhangsan的余额前，会生成ReadView，由于此时事务B没有提交仍然活跃，因此其事务id一定在ReadView的rw_trx_ids中，因此根据前面介绍的规则，事务B的修改对ReadView不可见。接下来，事务A根据指针指向的undo log查询上一版本的数据，得到zhangsan的余额为100。这样事务A就避免了脏读。")]),s._v(" "),e("h6",{attrs:{id:"_2-不可重复读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-不可重复读"}},[s._v("#")]),s._v(" （2）不可重复读")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201149661-1275460669.png",alt:"img"}})]),s._v(" "),e("p",[s._v("​\t\t当事务A在T2时刻读取zhangsan的余额前，会生成ReadView。此时事务B分两种情况讨论，一种是如图中所示，事务已经开始但没有提交，此时其事务id在ReadView的rw_trx_ids中；一种是事务B还没有开始，此时其事务id大于等于ReadView的low_limit_id。无论是哪种情况，根据前面介绍的规则，事务B的修改对ReadView都不可见。")]),s._v(" "),e("p",[s._v("​\t\t当事务A在T5时刻再次读取zhangsan的余额时，会根据T2时刻生成的ReadView对数据的可见性进行判断，从而判断出事务B的修改不可见；因此事务A根据指针指向的undo log查询上一版本的数据，得到zhangsan的余额为100，从而避免了不可重复读。")]),s._v(" "),e("h6",{attrs:{id:"_3-幻读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-幻读"}},[s._v("#")]),s._v(" （3）幻读")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img2018.cnblogs.com/blog/1174710/201901/1174710-20190128201206609-1998192060.png",alt:"img"}})]),s._v(" "),e("p",[s._v("MVCC避免幻读的机制与避免不可重复读非常类似。")]),s._v(" "),e("p",[s._v("当事务A在T2时刻读取0<id<5的用户余额前，会生成ReadView。此时事务B分两种情况讨论，一种是如图中所示，事务已经开始但没有提交，此时其事务id在ReadView的rw_trx_ids中；一种是事务B还没有开始，此时其事务id大于等于ReadView的low_limit_id。无论是哪种情况，根据前面介绍的规则，事务B的修改对ReadView都不可见。")]),s._v(" "),e("p",[s._v("当事务A在T5时刻再次读取0<id<5的用户余额时，会根据T2时刻生成的ReadView对数据的可见性进行判断，从而判断出事务B的修改不可见。因此对于新插入的数据lisi(id=2)，事务A根据其指针指向的undo log查询上一版本的数据，发现该数据并不存在，从而避免了幻读。")]),s._v(" "),e("h6",{attrs:{id:"扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩展"}},[s._v("#")]),s._v(" "),e("strong",[s._v("扩展")])]),s._v(" "),e("p",[s._v("​\t\t前面介绍的MVCC，是RR隔离级别下“非加锁读”实现隔离性的方式。下面是一些简单的扩展。")]),s._v(" "),e("h6",{attrs:{id:"_1-读已提交-rc-隔离级别下的非加锁读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-读已提交-rc-隔离级别下的非加锁读"}},[s._v("#")]),s._v(" （1）读已提交（RC）隔离级别下的非加锁读")]),s._v(" "),e("p",[s._v("RC与RR一样，都使用了MVCC，其主要区别在于：")]),s._v(" "),e("p",[s._v("​\t\tRR是在事务开始后第一次执行select前创建ReadView，直到事务提交都不会再创建。根据前面的介绍，RR可以避免脏读、不可重复读和幻读。")]),s._v(" "),e("p",[s._v("​\t\tRC每次执行select前都会重新建立一个新的ReadView，因此如果事务A第一次select之后，事务B对数据进行了修改并提交，那么事务A第二次select时会重新建立新的ReadView，因此事务B的修改对事务A是可见的。因此RC隔离级别可以避免脏读，但是无法避免不可重复读和幻读。")]),s._v(" "),e("h6",{attrs:{id:"_2-加锁读与next-key-lock"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-加锁读与next-key-lock"}},[s._v("#")]),s._v(" （2）加锁读与next-key lock")]),s._v(" "),e("p",[s._v("按照是否加锁，MySQL的读可以分为两种：")]),s._v(" "),e("p",[s._v("​\t\t一种是非加锁读，也称作快照读、一致性读，使用普通的select语句，这种情况下使用MVCC避免了脏读、不可重复读、幻读，保证了隔离性。")]),s._v(" "),e("p",[s._v("​\t\t另一种是加锁读，查询语句有所不同，如下所示：")]),s._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#共享锁读取")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("lock")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("share")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mode")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#排它锁读取")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("update")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("​\t\t加锁读在查询时会对查询的数据加锁（共享锁或排它锁）。由于锁的特性，当某事务对数据进行加锁读后，其他事务无法对数据进行写操作，因此可以避免脏读和不可重复读。而避免幻读，则需要通过next-key lock。"),e("strong",[s._v("next-key lock")]),s._v("是行锁的一种，实现相当于record lock(记录锁) + gap lock(间隙锁)；其特点是不仅会锁住记录本身(record lock的功能)，还会锁定一个范围(gap lock的功能)。因此，加锁读同样可以避免脏读、不可重复读和幻读，保证隔离性。")]),s._v(" "),e("h5",{attrs:{id:"二、原子性-atomicity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、原子性-atomicity"}},[s._v("#")]),s._v(" 二、原子性（Atomicity）")]),s._v(" "),e("h6",{attrs:{id:"_1、定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、定义"}},[s._v("#")]),s._v(" 1、定义")]),s._v(" "),e("p",[s._v("​\t\t原子性是指一个事务是一个不可分割的工作单位，其中的操作要么都做，要么都不做；如果事务中一个sql语句执行失败，则已执行的语句也必须回滚，数据库退回到事务前的状态。")]),s._v(" "),e("h6",{attrs:{id:"_2、实现原理-undo-log"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、实现原理-undo-log"}},[s._v("#")]),s._v(" 2、实现原理：undo log")]),s._v(" "),e("blockquote",[e("p",[s._v("​\t\tMySQL的事务日志有很多种，如二进制日志、错误日志、查询日志、慢查询日志等，此外InnoDB存储引擎还提供了两种事务日志："),e("strong",[s._v("redo log")]),s._v("(重做日志)和"),e("strong",[s._v("undo log")]),s._v("(回滚日志)。其中redo log用于"),e("strong",[s._v("保证事务持久性")]),s._v("；undo log则是"),e("strong",[s._v("事务原子性")]),s._v("和"),e("strong",[s._v("隔离性")]),s._v("实现的基础。")]),s._v(" "),e("p",[s._v("​\t\tundo log。实现原子性的关键，是当事务回滚时能够撤销所有已经成功执行的sql语句。"),e("strong",[s._v("InnoDB")]),s._v("实现回滚，靠的是undo log：当事务对数据库进行修改时，InnoDB会生成对应的undo log；如果事务执行失败或调用了rollback，导致事务需要回滚，便可以利用undo log中的信息将数据回滚到修改之前的样子。")]),s._v(" "),e("p",[s._v("​\t\tundo log属于逻辑日志，它记录的是sql执行相关的信息。当发生回滚时，InnoDB会根据undo log的内容做与之前相反的工作：对于每个insert，回滚时会执行delete；对于每个delete，回滚时会执行insert；对于每个update，回滚时会执行一个相反的update，把数据改回去。")]),s._v(" "),e("p",[s._v("​\t\t以update操作为例：当事务执行update时，其生成的undo log中会包含被修改行的主键(以便知道修改了哪些行)、修改了哪些列、这些列在修改前后的值等信息，回滚时便可以使用这些信息将数据还原到update之前的状态。")])]),s._v(" "),e("h5",{attrs:{id:"三、一致性-consistency"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、一致性-consistency"}},[s._v("#")]),s._v(" 三、一致性（Consistency）")]),s._v(" "),e("h6",{attrs:{id:"_1-定义-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义-2"}},[s._v("#")]),s._v(" 1. 定义")]),s._v(" "),e("p",[s._v("​\t\t一致性是指事务执行结束后，**数据库的完整性约束没有被破坏，事务执行的前后都是合法的数据状态。**数据库的完整性约束包括但不限于：实体完整性（如行的主键存在且唯一）、列完整性（如字段的类型、大小、长度要符合要求）、外键约束、用户自定义完整性（如转账前后，两个账户余额的和应该不变）。")]),s._v(" "),e("h6",{attrs:{id:"_2-实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现"}},[s._v("#")]),s._v(" 2. 实现")]),s._v(" "),e("blockquote",[e("p",[s._v("​\t\t可以说，一致性是事务追求的最终目标：前面提到的原子性、持久性和隔离性，都是为了保证数据库状态的一致性。此外，除了数据库层面的保障，一致性的实现也需要应用层面进行保障。")]),s._v(" "),e("p",[s._v("​\t\t实现一致性的措施包括：")]),s._v(" "),e("ul",[e("li",[s._v("保证原子性、持久性和隔离性，如果这些特性无法保证，事务的一致性也无法保证")]),s._v(" "),e("li",[s._v("数据库本身提供保障，例如不允许向整形列插入字符串值、字符串长度不能超过列的限制等")]),s._v(" "),e("li",[s._v("应用层面进行保障，例如如果转账操作只扣除转账者的余额，而没有增加接收者的余额，无论数据库实现的多么完美，也无法保证状态的一致")])])]),s._v(" "),e("h5",{attrs:{id:"四、持久性-durability"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、持久性-durability"}},[s._v("#")]),s._v(" 四、持久性（Durability）")]),s._v(" "),e("h6",{attrs:{id:"_1-定义-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义-3"}},[s._v("#")]),s._v(" 1. 定义")]),s._v(" "),e("p",[s._v("​\t\t持久性是指事务一旦提交，它对数据库的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。")]),s._v(" "),e("h6",{attrs:{id:"_2-实现原理-redo-log"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现原理-redo-log"}},[s._v("#")]),s._v(" 2. 实现原理：redo log")]),s._v(" "),e("blockquote",[e("p",[s._v("​\t\tInnoDB作为MySQL的存储引擎，数据是存放在磁盘中的，但如果每次读写数据都需要磁盘IO，效率会很低。为此，InnoDB提供了缓存("),e("strong",[s._v("Buffer Pool")]),s._v(")，"),e("strong",[s._v("Buffer Pool")]),s._v("中包含了磁盘中部分数据页的映射，作为访问数据库的缓冲："),e("code",[s._v("当从数据库读取数据时，会首先从Buffer Pool中读取，如果Buffer Pool中没有，则从磁盘读取后放入Buffer Pool")]),s._v("；当向数据库写入数据时，会首先写入Buffer Pool，Buffer Pool中修改的数据会定期刷新到磁盘中（这一过程称为刷脏）。")]),s._v(" "),e("p",[s._v("​\t\t"),e("strong",[s._v("Buffer Pool")]),s._v("的使用大大提高了读写数据的效率，但是也带了新的问题：如果MySQL宕机，而此时Buffer Pool中修改的数据还没有刷新到磁盘，就会导致数据的丢失，事务的持久性无法保证。")]),s._v(" "),e("p",[s._v("​\t\t于是，"),e("strong",[s._v("redo log")]),s._v("被引入来"),e("strong",[s._v("解决")]),s._v("这个问题："),e("strong",[s._v("当数据修改时，除了修改Buffer Pool中的数据，还会在redo log记录这次操作；当事务提交时，会调用fsync接口对redo log进行刷盘。如果MySQL宕机，重启时可以读取redo log中的数据，对数据库进行恢复。"),e("strong",[s._v("redo log采用的是WAL（Write-ahead logging，预写式日志），所有修改先写入日志，再更新到Buffer Pool，保证了数据不会因MySQL宕机而丢失，从而满足了")]),s._v("持久性")]),s._v("要求。")]),s._v(" "),e("p",[s._v("​\t\t既然redo log也需要在事务提交时将日志写入磁盘，**为什么它比直接将Buffer Pool中修改的数据写入磁盘(即刷脏)要快呢？**主要有以下两方面的原因：")]),s._v(" "),e("p",[s._v("（1）刷脏是随机IO，因为每次修改的"),e("strong",[s._v("数据位置随机")]),s._v("，但写redo log是追加操作，属于"),e("strong",[s._v("顺序IO")]),s._v("。")]),s._v(" "),e("p",[s._v("（2）刷脏是以数据页（Page）为单位的，MySQL默认页大小是16KB，"),e("strong",[s._v("一个Page上一个小修改都要整页写入")]),s._v("；而redo log中只包含真正需要写入的部分，无效IO大大减少。")])]),s._v(" "),e("h6",{attrs:{id:"_3-redo-log与binlog"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-redo-log与binlog"}},[s._v("#")]),s._v(" 3. redo log与binlog")]),s._v(" "),e("blockquote",[e("p",[s._v("​\t\t在MySQL中还存在binlog(二进制日志)也可以记录写操作并用于数据的恢复,但是redo log和bin log还是有些区别的：")]),s._v(" "),e("p",[s._v("（1）作用不同：redo log是用于crash recovery的，保证MySQL宕机也不会影响持久性；binlog是用于point-in-time recovery的，保证服务器可以基于时间点恢复数据，此外binlog还用于"),e("code",[s._v("主从复制")]),s._v("。")]),s._v(" "),e("p",[s._v("（2）层次不同：redo log是InnoDB存储引擎实现的，而binlog是MySQL的服务器层(可以参考文章前面对MySQL逻辑架构的介绍)实现的，同时支持InnoDB和其他存储引擎。")]),s._v(" "),e("p",[s._v("（3）内容不同：redo log是物理日志，内容基于磁盘的Page；binlog的内容是二进制的，根据binlog_format参数的不同，可能基于sql语句、基于数据本身或者二者的混合。")]),s._v(" "),e("p",[s._v("（4）写入时机不同：binlog在事务提交时写入；redo log的写入时机相对多元：")]),s._v(" "),e("ul",[e("li",[s._v("前面曾提到：当事务提交时会调用fsync对redo log进行刷盘；这是默认情况下的策略，修改innodb_flush_log_at_trx_commit参数可以改变该策略，但事务的持久性将无法保证。")]),s._v(" "),e("li",[s._v("除了事务提交时，还有其他刷盘时机：如master thread每秒刷盘一次redo log等，这样的好处是不一定要等到commit时刷盘，commit速度大大加快。")])])]),s._v(" "),e("h3",{attrs:{id:"二、mysql主从复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、mysql主从复制"}},[s._v("#")]),s._v(" 二、MySQL主从复制")]),s._v(" "),e("h4",{attrs:{id:"概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),e("p",[s._v("​\t\tMySQL主从复制是其最重要的功能之一。主从复制是指一台服务器充当主数据库服务器，另一台或多台服务器充当从数据库服务器，主服务器中的数据自动复制到从服务器之中。对于多级复制，数据库服务器即可充当主机，也可充当从机。MySQL主从复制的基础是主服务器对数据库修改记录二进制日志，从服务器通过主服务器的二进制日志自动执行更新。")]),s._v(" "),e("h5",{attrs:{id:"binlog和relaylog的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#binlog和relaylog的作用"}},[s._v("#")]),s._v(" binlog和relaylog的作用")]),s._v(" "),e("blockquote",[e("p",[s._v("binlog的主要作用是记录数据库中表的更改，它只记录改变数据的sql，不改变数据的sql不会写入，比如select语句一般不会被记录，因为他们不会对数据产生任何改动。")]),s._v(" "),e("p",[s._v("relay log中（中继日志）中，中继日志也是记录日志更新的信息的")])]),s._v(" "),e("h4",{attrs:{id:"为什么需要主从复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要主从复制"}},[s._v("#")]),s._v(" 为什么需要主从复制")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("提高数据库读写性能，提升系统吞吐量")]),s._v(" "),e("p",[s._v("​\t\t在业务复杂的系统中，如果有一条 SQL 语句的执行需要锁表，导致 MySQL 暂时不能提供读的服务，那么就很影响运行中的业务，使用主从复制，让主库负责写，从库负责读，这样即使主库出现了锁表的情景，通过读从库也可以保证业务的正常运作。")]),s._v(" "),e("p",[s._v("​\t\t这样读写分离的过程能够是整体的服务性能提高，即使写操作时间比较长，也不影响读操作的进行。")])])]),s._v(" "),e("h4",{attrs:{id:"主从复制原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主从复制原理"}},[s._v("#")]),s._v(" 主从复制原理")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://res-static.hc-cdn.cn/fms/img/e5e05b7b5cfd963c94c23a970564041f1603768896154",alt:"小白都能懂的Mysql主从复制原理（原理+实操）3"}})]),s._v(" "),e("p",[s._v("Mysql的主从复制中主要有三个线程："),e("code",[s._v("binlog dump thread、slave的I/O thread 、SQL thread）")]),s._v("。")]),s._v(" "),e("blockquote",[e("p",[s._v("当Master有数据更新的时候，会按照binlog 的格式，将更新的事件类型写入master的binlog文件中，创建binlog dump thread通知slave说master库中有数据更新，此时slave接收到通知之后，会创建I/O thread来请求master，master会返回binlog文件的副本以及数据更新的位置，slave收到binlog副本文件后，将文件保存在relay log中（中继日志）中，中继日志也是记录日志更新的信息的，随后sql thread在slave中创建，将更新的内容同步到slave数据库中，这样就保证了主从的数据同步。")])]),s._v(" "),e("p",[s._v("以上就是主从复制的过程，当然，主从复制的过程有不同的策略方式进行数据的同步，主要包含以下几种：")]),s._v(" "),e("p",[s._v("同步策略：Master会等待所有的slave都回应后才会提交，这会使主从同步的性能严重的影响")]),s._v(" "),e("p",[s._v("半同步策略：Master至少会等待一个slave回应后在提交")]),s._v(" "),e("p",[s._v("异步策略：Master不用等待slave回应就可以提交")]),s._v(" "),e("p",[s._v("延迟策略：slave要落后Master指定的时间")]),s._v(" "),e("h4",{attrs:{id:"主从搭建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主从搭建"}},[s._v("#")]),s._v(" 主从搭建")]),s._v(" "),e("h5",{attrs:{id:"删除mysql"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除mysql"}},[s._v("#")]),s._v(" 删除mysql")]),s._v(" "),e("p",[s._v("这里提供centos7下完全卸载MySQL的方法")]),s._v(" "),e("blockquote",[e("p",[s._v("首先检查centos 7里面的Mysql安装包和依赖包：")])]),s._v(" "),e("blockquote",[e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("rpm")]),s._v(" -qa "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" mysql\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("接着可以删除上面的安装包和依赖包：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" yum remove mysql*\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("继续检查一下是否存在Mariadb，若是存在直接删除Mariadb")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("// 检查是否存在Mariadb\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("rpm")]),s._v(" -qa "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" mariadb\n// 删除Mariadb\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("rpm")]),s._v(" -e --nodeps mariadb-libs-xxxxx.el7.x86_64\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("然后，就是删除Mysql的配置文件，可以使用下面的命令查找Msqyl配置文件的路径：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" / -name mysql\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("然后，通过下面的命令，将他们逐一删除：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf /usr/lib64/mysql\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("接着就开始安装Mysql 8了，使用wget命令下载Mysql 8的repo源，并且执行安装：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("wget")]),s._v(" https://repo.mysql.com//mysql80-community-release-el7-3.noarch.rpm\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" yum -y "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" mysql80-community-release-el7-3.noarch.rpm\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])])]),s._v(" "),e("blockquote",[e("p",[s._v("安装完后会在/etc/yum.repos.d/目录下生成下面的两个文件，说明安装成功了：")]),s._v(" "),e("p",[s._v("mysql-community.repo\nmysql-community-source.repo")]),s._v(" "),e("p",[s._v("安装完Mysql8后，接着来更新一下yum源，并且查看yum仓库中的Mysql：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("// 更新yum源\nyum clean all\nyum makecache\n// 查看yum仓库中的Mysql\nyum list "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" mysql\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("可以查看到仓库中存在mysql-community-server.x86_64，直接安装就行了：")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[s._v("sudo yum "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("y install mysql"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("community"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("server\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("接着启动Mysql，并检查Mysql的状态：")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 启动Mysql")]),s._v("\nsystemctl start  mysqld"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("service\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 检查Mysql的状态")]),s._v("\nsystemctl status mysqld\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])])]),s._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/weixin_43640848/article/details/113064552?spm=1001.2014.3001.5501",target:"_blank",rel:"noopener noreferrer"}},[s._v("修改密码参考此链接的博客"),e("OutboundLink")],1)]),s._v(" "),e("h5",{attrs:{id:"开始搭建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开始搭建"}},[s._v("#")]),s._v(" 开始搭建")]),s._v(" "),e("p",[s._v("这里使用的使用两台centos 7的vmware的ip分别是"),e("code",[s._v("192.168.163.155（Slave）")]),s._v("和"),e("code",[s._v("192.168.163.156（Master）")]),s._v("作为测试，首先在192.168.163.156（Master）中创建一个测试库test：")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建测试库")]),s._v("\ncreate database test "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" character "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" utf8mb4 collate utf8mb4_general_ci"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 并且授权")]),s._v("\ngrant all privileges on test"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" to "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'test'")]),s._v("@"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("然后编辑Master中的my.cnf文件，此文件位于/etc/my.cnf，执行下面的sql，并添加下面的信息：")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[s._v("sudo vi "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("etc"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("my"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("cnf\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("以下是配置文件中的信息"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n# 配置编码为utf8\ncharacter_set_server"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("utf8mb4\ninit_connect"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'SET NAMES utf8mb4'")]),s._v("\n\n# 配置要给Slave同步的数据库\nbinlog"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("db"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("test\n# 不用给Slave同步的数据库，一般是Mysql自带的数据库就不用给Slave同步了\nbinlog"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("ignore"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("db"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("mysql\nbinlog"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("ignore"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("db"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("information_schema\nbinlog"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("ignore"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("db"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("performance_schema\nbinlog"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("ignore"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("db"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("sys\n# 自动清理"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v("天前的log文件\nexpire_logs_days"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v("\n# 启用二进制日志\nlog"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("bin"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("mysql"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("bin\n# Master的id，这个要唯一，唯一是值，在主从中唯一\nserver"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("id"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("p",[s._v("配置完后重启Mysql服务，并查看Mysql的log_bin日志是否启动成功：")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[s._v("systemctl restart mysqld\n# 查看log_bin日志是否启动成功\nshow variables like "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%log_bin%'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("img",{attrs:{src:"https://res-static.hc-cdn.cn/fms/img/e4f43074b2ac347b63eb72413cc238d51603768896155",alt:"小白都能懂的Mysql主从复制原理（原理+实操）10"}})]),s._v(" "),e("p",[s._v("接着查看Master的状态：")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[s._v("show master status"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("img",{attrs:{src:"https://res-static.hc-cdn.cn/fms/img/378a21cfaace770d4c2612f488e286d11603768896155",alt:"小白都能懂的Mysql主从复制原理（原理+实操）11"}})]),s._v(" "),e("p",[s._v("这两个数据"),e("code",[s._v("File")]),s._v("和"),e("code",[s._v("Position")]),s._v("要记住，后面配置Slave的时候要使用到这两个数据。")]),s._v(" "),e("p",[s._v("最后登陆Master的数据库，并创建一个用户用于同步数据：")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[s._v("create user "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'backup'")]),s._v("@"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IDENTIFIED")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("BY")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LDCldc-2020'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\ngrant file on "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" to "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'backup'")]),s._v("@"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GRANT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("REPLICATION")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SLAVE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("REPLICATION")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CLIENT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ON")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" to "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'backup'")]),s._v("@"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("到这里Master的配置就配置完了，后面就进行Slave的配置。")]),s._v(" "),e("p",[s._v("在Slave中同样要创建test数据库，并且授权给test用户")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[s._v("# 创建同步数据的test数据库\ncreate database test "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" character "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" utf8mb4 collate utf8mb4_general_ci"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n# 授权\ngrant all privileges on test"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" to "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'test'")]),s._v("@"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("接着编辑Slave中my.cnf文件，同样是在/etc/my.cnf路径下，加入如下配置：")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[s._v("# 配置从服务器的"),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ID")]),s._v("，唯一的\nserver"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("id"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n#加上以下参数可以避免更新不及时，"),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SLAVE")]),s._v(" 重启后导致的主从复制出错。\nread_only "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nmaster_info_repository"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TABLE")]),s._v("\nrelay_log_info_repository"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TABLE")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("并且重启Slave中的Mysql服务：")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[s._v("systemctl restart mysqld\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("在Slave中添加Master的信息：")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[s._v("# master_host是Master的ip，master_log_file和master_log_pos就是配置之前查看Master状态时显示的File和Position信息\nchange master to master_host"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'192.168.163.156'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("master_port"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3306")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("master_user"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'backup'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("master_password"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'LDCldc-2020'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("master_log_file"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'mysql-bin.000001'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("master_log_pos"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1513")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("最后查看Slave的状态：")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[s._v("show slave status\\"),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("G")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("img",{attrs:{src:"https://res-static.hc-cdn.cn/fms/img/33e958b62244225ced7111c1dfd6d72b1603768896156",alt:"小白都能懂的Mysql主从复制原理（原理+实操）12"}})]),s._v(" "),e("p",[s._v("当看到"),e("code",[s._v("Slave_IO_Running")]),s._v("和"),e("code",[s._v("Slave_SQL_Running")]),s._v("都是yes的时候，这表示主从配置成功。")]),s._v(" "),e("p",[e("strong",[s._v("「Slave_IO_Running也就是Slave中的IO线程用于请求Master，Slave_SQL_Running时sql线程将中继日志中更新日志同步到Slave数据库中。」")])]),s._v(" "),e("p",[s._v("但是，有时候Slave_IO_Running会为no，而Slave_SQL_Running为yes")]),s._v(" "),e("p",[s._v("首先看重启一下"),e("code",[s._v("Slave")]),s._v("的MySQL服务："),e("code",[s._v("systemctl restart mysqld")]),s._v("，然后执行：")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[s._v("stop slave"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nstart slave"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("这样就能够使"),e("code",[s._v("Slave_IO_Running")]),s._v("和"),e("code",[s._v("Slave_SQL_Running")]),s._v("显示都是yes了")]),s._v(" "),e("h4",{attrs:{id:"mysql主机宕机的解决方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql主机宕机的解决方法"}},[s._v("#")]),s._v(" Mysql主机宕机的解决方法")]),s._v(" "),e("p",[s._v("​\t\t假设我们有三个机子")]),s._v(" "),e("p",[s._v("master： 192.168.80.130")]),s._v(" "),e("p",[s._v("slave：192.168.80.143")]),s._v(" "),e("p",[s._v("slave：192.168.80.146")]),s._v(" "),e("p",[s._v("​\t\t首先模拟（MySQL---master）宕机：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" mysqld stop\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("​\t\t当master宕机后去slave去查看是否出现错误信息")]),s._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("show slave status\\G;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("​\t\t这时两台SLAVE主机已经连接不上MASTER")]),s._v(" "),e("p",[s._v("​\t\tIO进程和sql进程状态：Slave_IO_Running: Connecting(该状态表示会一直尝试重连主，如果主正常了，该进程状态会自动变成Yes)，此时，master不能提供读写服务。我们想将其中最新的slave提升为主。")]),s._v(" "),e("p",[s._v("​\t\t具体操作步骤如下：")]),s._v(" "),e("p",[s._v("1、在每个SLAVE库上执行：")]),s._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("stop  slave io_thread;\n\nshow  processlist;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("直到看到Slave has read all relay log; waitingfor more updates,则表示从库更新都执行完毕了")]),s._v(" "),e("p",[s._v("2、 选择新的主库")]),s._v(" "),e("p",[s._v("​\t\t对比选择Relay_Master_Log_File,Exec_Master_Log_Pos最大的作为新的主库，这里我们选择slave1为新的主库")]),s._v(" "),e("p",[s._v("​\t\t其实，如果两个从IO进程一直都是正常，没有落后于主，且relay log都已经重放完成，两个从是一样的，选择哪个都可以。")]),s._v(" "),e("p",[s._v("​\t\t这里选择slave1作为新主。")]),s._v(" "),e("p",[s._v("3、进行相应配置")]),s._v(" "),e("p",[s._v("​\t\t登陆slave1，执行stop slave;并进入数据库目录，删除master.info和relay-log.info文件（删除前，可以先备份下这俩文件）；")]),s._v(" "),e("p",[s._v("​\t\t配置my.cnf文件，开启log-bin,如果有log-slaves-updates=1和read-only=1则要注释掉，然后重启slave1.")]),s._v(" "),e("p",[s._v("4、 reset master")]),s._v(" "),e("blockquote",[e("p",[s._v("在slave1上reset master，会重新生成二进制日志。")]),s._v(" "),e("p",[s._v("mysql> reset master;")]),s._v(" "),e("p",[s._v("Query OK, 0 rows affected (0.02 sec)")]),s._v(" "),e("p",[s._v("mysql> show master status;\n+------------------+----------+--------------+------------------+\n| File | Position | Binlog_Do_DB | Binlog_Ignore_DB |\n+------------------+----------+--------------+------------------+\n| mysql-log.000001 | 399 |        |            |\n+------------------+----------+--------------+------------------+\n1 row in set (0.00 sec)")])]),s._v(" "),e("p",[s._v("5、创建用于同步的用户")]),s._v(" "),e("p",[s._v("如果slave1完全同步master的话，这步可以省略。")]),s._v(" "),e("p",[s._v("6、 slave2指向slave1")]),s._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("mysql>change master to master_user='RepUser',master_password='beijing',master_host='192.168.80.134',master_port=3306,master_log_file='mysql-bin.000001',master_log_pos=154;\n\nmysql>start slave;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h3",{attrs:{id:"三、各种树结构的比较"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、各种树结构的比较"}},[s._v("#")]),s._v(" 三、各种树结构的比较")]),s._v(" "),e("h4",{attrs:{id:"二叉查找树-二叉搜索树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二叉查找树-二叉搜索树"}},[s._v("#")]),s._v(" 二叉查找树（二叉搜索树）")]),s._v(" "),e("blockquote",[e("h4",{attrs:{id:"什么是二叉查找树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是二叉查找树"}},[s._v("#")]),s._v(" 什么是二叉查找树")]),s._v(" "),e("ol",[e("li",[s._v("左子树所有节点的值均小于或等于它的根节点的值")]),s._v(" "),e("li",[s._v("右子树上所有节点的值均大于或等于它的根节点的值")]),s._v(" "),e("li",[s._v("左、右子树也分别为二叉排序树")])]),s._v(" "),e("h4",{attrs:{id:"平衡二叉树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉树"}},[s._v("#")]),s._v(" 平衡二叉树")]),s._v(" "),e("p",[s._v("平衡二叉树的出现就是为了保证树不至于太倾斜，尽量保证两边平衡，那么什么样的树称为平衡二叉树？")]),s._v(" "),e("ul",[e("li",[s._v("定义：要么是一个空树，要么保证左右子树的高度差<=1，同时每一个子树都是平衡二叉树")]),s._v(" "),e("li",[s._v("当然，为保证二叉树的平衡性，平衡二叉树在添加和删除节点是需要进行旋转以保持树的平衡")]),s._v(" "),e("li",[s._v("既能保持左右子树的高度差<=1，其实也就保证的平衡二叉树的插入，查询的时间复杂度都是O(log2(n))")])])]),s._v(" "),e("h4",{attrs:{id:"红黑树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[s._v("#")]),s._v(" 红黑树")]),s._v(" "),e("blockquote",[e("p",[s._v("红黑树也是二叉查找树，红黑树之所以难死难在它是自平衡的二叉查找树，在进行插入和删除等可能破坏树的平衡的操作是，需要重新自处理达到平衡状态。")]),s._v(" "),e("h4",{attrs:{id:"红黑树的定义和性质"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#红黑树的定义和性质"}},[s._v("#")]),s._v(" 红黑树的定义和性质")]),s._v(" "),e("p",[s._v("红黑树是一种含有红黑节点并且能够自平衡的二叉查找树，他必须满足下面的性质：")]),s._v(" "),e("ol",[e("li",[s._v("每个节点要么是黑色，要么就是红色")]),s._v(" "),e("li",[s._v("根节点是黑色")]),s._v(" "),e("li",[s._v("每个叶子节点是黑色")]),s._v(" "),e("li",[s._v("每个红色节点的两个子节点一定是黑色")]),s._v(" "),e("li",[s._v("任意节点到每个叶子节点的路径都包含数量相同的黑节点")]),s._v(" "),e("li",[s._v("从性质5推出如果一个节点存在黑子节点，那么该节点肯定有两个子节点")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/2392382-4996bbfb4017a3b2.png?imageMogr2/auto-orient/strip|imageView2/2/w/526/format/webp",alt:"img"}})]),s._v(" "),e("p",[s._v("红黑树并不是一个"),e("em",[s._v("完美")]),s._v("平衡二叉查找树，从上图可以看到，根结点P的左子树显然比右子树高，但左子树和右子树的黑结点的层数是相等的，也即任意一个结点到到每个叶子结点的路径都包含数量相同的黑结点(性质5)。所以我们叫红黑树这种平衡为"),e("strong",[s._v("黑色完美平衡")]),s._v("。")]),s._v(" "),e("p",[s._v("红黑树节点的叫法："),e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/2392382-abedf3ecc733ccd5.png?imageMogr2/auto-orient/strip|imageView2/2/w/772/format/webp",alt:"img"}})]),s._v(" "),e("p",[s._v("红黑树能自平衡它靠的是三种操作：左旋、右旋和变色")]),s._v(" "),e("ul",[e("li",[s._v("左旋：以某个节点作为支点（旋转节点），其右子节点变为旋转节点的父节点，右子节点的左子节点变为旋转节点的右子节点，左子节点保持不变")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/2392382-a95db442f1b47f8a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp",alt:"img"}})]),s._v(" "),e("ul",[e("li",[s._v("右旋：以某个节点作为支点（旋转节点），其左子节点变为旋转节点的父节点，左子节点的右子节点变为旋转节点的左子节点，右子节点保持不变")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/2392382-0676a8e2a12e2a0b.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp",alt:"img"}})]),s._v(" "),e("ul",[e("li",[s._v("变色：节点的颜色由红变黑或由黑边红")])]),s._v(" "),e("p",[s._v("左旋只影响旋转节点和其右子树的结构，把右子树的节点往左子树挪了")]),s._v(" "),e("p",[s._v("右旋只影响旋转节点和其左子树的结构，把左子树的节点往右子树挪了")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://www.jianshu.com/p/e136ec79235c",target:"_blank",rel:"noopener noreferrer"}},[s._v("红黑树的理解"),e("OutboundLink")],1)])]),s._v(" "),e("h4",{attrs:{id:"b树-b-树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b树-b-树"}},[s._v("#")]),s._v(" B树（B - 树）")]),s._v(" "),e("h4",{attrs:{id:"b-树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b-树"}},[s._v("#")]),s._v(" B+树")]),s._v(" "),e("h3",{attrs:{id:"四、索引失效"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、索引失效"}},[s._v("#")]),s._v(" 四、索引失效")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("如果"),e("code",[s._v("条件中有or的话")]),s._v("，即使其中有条件带索引也不会使用，如果想使用or又想让索引生效的话，那就得为or条件中的每个列都加上索引。")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("like通配符")]),s._v("，但是用模糊搜索是，尽量采用后置的通配符，例如：name||‘%’，因为走索引时，会从前去匹配索引列，这时候是可以找到的，如果采用前匹配，那么查索引就会很麻烦，比如查询所有姓张的人，就可以去搜索“张%”，相反如果你查询叫“明”的人，那么只能是“%明”，这时候索引就无法定位，所以在前匹配符的情况下，执行计划会更倾向于选择全表扫描，后匹配的话会走索引（INDEX RANGE SCAN）。所以业务设计如果考虑到模糊搜索问题的话要尽量使用后置通配符。")])]),s._v(" "),e("li",[e("p",[s._v("如果"),e("code",[s._v("列类型是字符串")]),s._v("，那一定要在条件中将数据使用引号引用起来，否则不会使用索引")])]),s._v(" "),e("li",[e("p",[s._v("例如在某个表中，有两列（id和_id）都建立了单独索引，下面这种查询条件不会走索引")]),s._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" test "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" _id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])])]),s._v(" "),e("li",[e("p",[e("code",[s._v("存在NULL值条件")]),s._v("，并不是存在null值就不能使用索引，当查询某列值是否为null或者和其他条件一起使用的时候都是可以使用到索引的，包括给存在null值的列添加联合索引，使用SQL进行条件查询的时候也可以使用到索引。虽然mysql可以在含有null的列上使用索引，但是不代表null和其他数据在索引中是一样的，不建议列上允许为空，最好设置not null，并设置一个默认值，比如0和“ ”空字符串等，如果是datetime类型，可以设置成“1970-01-0 00:00:00”这样的特殊值。对于mysql来说，null是一个特殊值，不能使用<,=,>这样的运算符，对null做算术运算的结果都是null，count时不会包括null行，某列可为null比not null可能小更多的存储空间。")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("NOT条件")]),s._v("，我们建立索引时，如果查询条件为等值或者范围查询时，索引可以根据查询条件去找对应的条目，反过来当查询条件为非是，索引定位就比较困难了，执行计划是可能会更倾向于全表扫描，这类的查询条件有：<>、NOT、in、not exists")]),s._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" test "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<>")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" test "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" test "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("not")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" test "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("not")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("exists")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" test_02"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" test"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("条件上包括函数，查询条件上尽量不要"),e("code",[s._v("对索引使用函数")]),s._v("，比如下面这个sql")]),s._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" test "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" upper"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'SUNYANG'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#这样是不会走索引的，因为索引在建立是会和计算之后的可能不同，无法定位到索引，但是如果查询条件不是对索引列进行计算，那么可以走索引，比如：")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" test "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" name"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("upper"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'sunyang'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这样的函数还有：to_char、to_date、to_number、trunc等")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("数据类型的转换，例如当"),e("code",[s._v("查询条件存在隐式转换")]),s._v("时，索引也会失效，比如在数据库中里id存number类型，但是在查询是，却用了下面的形式：")]),s._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" sunyang "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'123'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);