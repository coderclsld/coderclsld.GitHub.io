(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{551:function(a,t,s){"use strict";s.r(t);var e=s(1),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"super-golang"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#super-golang"}},[a._v("#")]),a._v(" super Golang")]),a._v(" "),s("h3",{attrs:{id:"new和make的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new和make的区别"}},[a._v("#")]),a._v(" new和make的区别")]),a._v(" "),s("p",[a._v("new和make都是用来内存分配的，且都在堆上分配内存。\nmake用来初始化map、slice、chan，返回引用类型本身；\nnew的作用是根据传入的类型分配一片内存空间并返回指向这片内存空间的指针，\nnew也可以初始化map,slice和chan，但是不会初始化他们的内部数据结构。")]),a._v(" "),s("h3",{attrs:{id:"slice和数组的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#slice和数组的区别"}},[a._v("#")]),a._v(" slice和数组的区别")]),a._v(" "),s("p",[a._v("数组的长度是固定的，slice的长度是可以动态调整的。\n数组在创建的时候需要固定长度，而slice则不需要。\nslice的底层也是数组实现的，slice是通过一个结构体，结构体中有cap字段（表示切片容量）、len字段（表示切片长度）和array字段（是一个指针指向底层的数组地址）。")]),a._v(" "),s("h3",{attrs:{id:"slice的动态扩容说一下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#slice的动态扩容说一下"}},[a._v("#")]),a._v(" slice的动态扩容说一下")]),a._v(" "),s("p",[a._v("当新切片需要的容量大于来被扩容容量时，直接按照新切片需要的容量扩容；\n当等原来切片的容量小于1024时，新切片扩容到原来切片的2倍；\n当原来切片的容量大于等于1024时，新切片扩容到原来的1.25倍；")]),a._v(" "),s("h3",{attrs:{id:"参数传递切片和切片指针有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数传递切片和切片指针有什么区别"}},[a._v("#")]),a._v(" 参数传递切片和切片指针有什么区别")]),a._v(" "),s("p",[a._v("切片就是一个slice结构体，结构体的中有array字段指向底层数组。\n所以不管传递的是切片还是切片指针，都是指向底层的同一个数组（传递切片实则是创建一个新的slice结构体，但是slice结构体的array字段还是指向原先的底层数组地址，传递切片指针就是将原先slice结构体的地址值进行传递，就不需要创建新的slice结构体而已）\n所以不管是传递切片还是切片指针，在函数内对切片进行修改时都会影响到函数外的切片（除非函数内的切片是copy创建出来的或者是触发了扩容创建了新的底层数组）。")]),a._v(" "),s("h3",{attrs:{id:"有没有遇到过内存逃逸会带来什么影响"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有没有遇到过内存逃逸会带来什么影响"}},[a._v("#")]),a._v(" 有没有遇到过内存逃逸会带来什么影响")]),a._v(" "),s("h3",{attrs:{id:"range遍历切片有什么需要注意的吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#range遍历切片有什么需要注意的吗"}},[a._v("#")]),a._v(" range遍历切片有什么需要注意的吗")]),a._v(" "),s("p",[a._v("range在遍历前是先将切片的值copy出一份进行遍历，所以在range中对v进行修改不会影响原切片的结果，不过可以使用切片下表的形式进行更改切片值。")]),a._v(" "),s("h3",{attrs:{id:"map的底层数据结构是怎么样子的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map的底层数据结构是怎么样子的"}},[a._v("#")]),a._v(" map的底层数据结构是怎么样子的")]),a._v(" "),s("p",[a._v("map的底层结构体是一个hmap，hmap里面维护着buckets数组，buckets数组的数量为2^B,buckets数组中的每个元素都是bmap结构体，bmap中有tophash字段,tophash是个容量为8的uint8数组。")]),a._v(" "),s("h3",{attrs:{id:"怎么进行查找操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么进行查找操作"}},[a._v("#")]),a._v(" 怎么进行查找操作")]),a._v(" "),s("p",[a._v("首先key进行hash，通过hash后的低B位得到buckets数组的下标，查看buckets数组下标对应的元素，也就是bmap中，")]),a._v(" "),s("p",[a._v("查看bmap中的tophash是否与key进行hash后的高8位相同，相同就再查看key值是否相同，相同就拿出value的值；")]),a._v(" "),s("p",[a._v("如果tophash中都没有相同的值就去溢出桶中找，重复上面的步骤，知道找到key或者没有溢出桶为止。")]),a._v(" "),s("h3",{attrs:{id:"怎么进行扩容操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么进行扩容操作"}},[a._v("#")]),a._v(" 怎么进行扩容操作")]),a._v(" "),s("p",[a._v("map的扩容是渐进式的，即扩容操作都是拆散在每一次写操作里面。然后扩容有两个触发条件：")]),a._v(" "),s("ol",[s("li",[a._v("map的负载因子（长度和容量的比例）超过阈值（6.5），此时map就会认为无法承担更多的key，需要进行两倍扩容。扩容发生时会将老数据存进oldbuckets，每次对map进行增删改查的时候会触发从oldbucket中迁移到bucket的操作（渐进式），在扩容没有完全迁移完成之前，每次get或者put或者遍历数据时，都会先遍历老oldbucket再遍历bucket")]),a._v(" "),s("li",[a._v("当B < 15时，overflow的bucket数量超过了2^B 或 当B > 15时，overflow的bucket数量超过2^15。map就认为局部bmap含有过多的overflow，此时就会把后置位的数据整理到前面，这种情况下元素是发生重排而不会换桶，即相同容量扩容。")])]),a._v(" "),s("h3",{attrs:{id:"map是线程安全的吗-怎么现场安全使用map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map是线程安全的吗-怎么现场安全使用map"}},[a._v("#")]),a._v(" map是线程安全的吗，怎么现场安全使用map")]),a._v(" "),s("p",[a._v("不是所以map在写入的时候进行读取操作会报错，可以使用sync.mutex，sync.RWmutex，sync.map")]),a._v(" "),s("h3",{attrs:{id:"mutex有几种模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mutex有几种模式"}},[a._v("#")]),a._v(" mutex有几种模式")]),a._v(" "),s("h3",{attrs:{id:"那这几种方式在性能上有什么区别呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#那这几种方式在性能上有什么区别呢"}},[a._v("#")]),a._v(" 那这几种方式在性能上有什么区别呢")]),a._v(" "),s("p",[a._v("sync.RWMutex的锁适合读多写少的场景，因为读锁可以多重加锁，当有读操作时不会阻塞读操作，会阻塞写操作。当有写操作时会阻塞写操作和读操作")]),a._v(" "),s("p",[a._v("sync.map对map进行读时不需要加锁，使用read和dirty两个map来进行读写分离，read和dirty都指向同一个底层的map。")]),a._v(" "),s("p",[a._v("read相当于一个缓存层，提供了快速查找map的结构，查找过程是如果read中存在则返回，若没有则判断amended属性，判断dirty是否包含read没有的数据，若amended就去dirty中查找")]),a._v(" "),s("h3",{attrs:{id:"channel的底层数据结构是怎样的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#channel的底层数据结构是怎样的"}},[a._v("#")]),a._v(" channel的底层数据结构是怎样的")]),a._v(" "),s("p",[a._v("channel用一个环形队列buf缓存收到的消息，分别用两个waitq类型的双向列表recvq和sendq存储当缓冲区已满时接收端和发送端的goroutine信息，用来记录buf循环链表当前发送和接收数据的下标sendx和recvx。")]),a._v(" "),s("p",[a._v("在创建channel时可以选择不带缓冲和带缓冲，如果不带缓冲就只给hchan本身分配内存；")]),a._v(" "),s("p",[a._v("如果带缓冲且不包括指针类型，就给hchan和环形队列缓存buf分配一段连续的空间；")]),a._v(" "),s("p",[a._v("如果带缓冲且包含指针类型，就给hchan和环形队列缓存buf分别分配内存空间。")]),a._v(" "),s("h3",{attrs:{id:"channel如何进行发送和接收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#channel如何进行发送和接收"}},[a._v("#")]),a._v(" channel如何进行发送和接收")]),a._v(" "),s("p",[a._v("发送数据")]),a._v(" "),s("ol",[s("li",[a._v("如果recvq不为空且buf为空，就直接将数据发送给等待接收数据的goroutine，就不放进队列中。")]),a._v(" "),s("li",[a._v("如果recvq为空且buf未满，就只能将数据发送给缓冲区buf")]),a._v(" "),s("li",[a._v("如果buf已满，那就只能将发送数据的goroutine打包成sudog对象放入sendq，并将goroutine设置为等待状态")])]),a._v(" "),s("p",[a._v("接受数据")]),a._v(" "),s("ol",[s("li",[a._v("如果sendq不为空且buf未空，就直接从sendq中取出一个等待发送数据的goroutine，取出数据")]),a._v(" "),s("li",[a._v("如果buf不为空，就从buf中取出数据")]),a._v(" "),s("li",[a._v("如果buf未空且sendq不为空，就将该接收数据的goroutine打包成sudog对象放入recvq，将goroutine设置为等待状态")])]),a._v(" "),s("h3",{attrs:{id:"channel是线程安全的吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#channel是线程安全的吗"}},[a._v("#")]),a._v(" channel是线程安全的吗")]),a._v(" "),s("p",[a._v("是，在对buf的数据进行入队和出队操作是，使用了互斥锁防止多个线程并发修改数据")]),a._v(" "),s("h3",{attrs:{id:"context包有什么作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#context包有什么作用"}},[a._v("#")]),a._v(" context包有什么作用？")]),a._v(" "),s("p",[a._v("用于goroutine之间传递信号和一些共享值，可以使用value进行传值，也可以使用deadline、done、err进行控制")]),a._v(" "),s("h3",{attrs:{id:"线程有几种模型-goroutine的原理了解吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程有几种模型-goroutine的原理了解吗"}},[a._v("#")]),a._v(" 线程有几种模型，goroutine的原理了解吗")]),a._v(" "),s("p",[a._v("linux中的操作系统模型主要是是说内核线程和用户线程的模型，有一对一，一对 N , M 对 一，N 对 M关系")]),a._v(" "),s("p",[a._v("GMP中的G代表着用户级线程就是协程，协程有自己的调用栈。M代表系统内核线程。P代表调度器，有执行所需要的资源和本地执行队列，可以通过runtime.GOMAXPROCS()去设置的。")]),a._v(" "),s("p",[a._v("还有全局队列，用于存放等待运行的G。P的本地队列，用于存放等待运行中的G，但存的数量不超过256个。")]),a._v(" "),s("p",[a._v("新建G时，G会优先加入到P的本地队列，如果队列满了就会把本地队列中一半的G移动到全局队列中。")]),a._v(" "),s("p",[a._v("如果M想运行任务就得获取P,如果p的本地队列为空，M就会尝试从全局队列中拿一批G放到P的本地队列或者从其他P的本地队列中偷一半放到自己P的本地队列中。")]),a._v(" "),s("h3",{attrs:{id:"在gpm模型中-g有几种状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在gpm模型中-g有几种状态"}},[a._v("#")]),a._v(" 在GPM模型中，G有几种状态？")]),a._v(" "),s("p",[a._v("Gidle：表示goroutine刚刚被分配还没有初始化")]),a._v(" "),s("p",[a._v("Grunnable：处于Grunnable的任务一定在任务队列中等待被调度")]),a._v(" "),s("ol",[s("li",[a._v("当goroutine被分配资源以及初始化后，会被置为Grunnable，然后被添加到P的本地队列中等待调度")]),a._v(" "),s("li",[a._v("当某个阻塞任务(Gwaiting)的等待条件满足被唤醒时，任务状态会被重置为Grunnable，并加入P的运行队列中等待调度")]),a._v(" "),s("li",[a._v("某个G被sysmon发现运行时间超过10ms时会被调度器重新切换为Grunnable放回本地队列中并执行其他G")])]),a._v(" "),s("p",[a._v("Grunning:当任务被P获取到时会将状态切换为Grunning")]),a._v(" "),s("p",[a._v("Gsyscall：当任务执行系统调用前，会被置为Gsyscall，如果调用是阻塞式的会加当前的M与P分离。当系统调用返回后如果当前任务没有被抢占则将任务切回Grunning，否则这位Grunnable并返回任务队列中")]),a._v(" "),s("p",[a._v("Gwaiting：当一个任务需要的资源或者运行条件不满足时，会被置为Gwaiting状态。")]),a._v(" "),s("p",[a._v("Gdead：一个任务执行结束")]),a._v(" "),s("h3",{attrs:{id:"线程有几种状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程有几种状态"}},[a._v("#")]),a._v(" 线程有几种状态？")]),a._v(" "),s("p",[a._v("New:线程创建尚未调用start方法\nRunnable：等待被CPU调度\nRunning：获得CPU时间片执行代码\nBlocked：线程因为某种原因放弃CPU使用权\nDead:现场退出")]),a._v(" "),s("h3",{attrs:{id:"goroutine什么时候会发生阻塞-如果g一直占用资源怎么办"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#goroutine什么时候会发生阻塞-如果g一直占用资源怎么办"}},[a._v("#")]),a._v(" goroutine什么时候会发生阻塞，如果G一直占用资源怎么办")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("由于原子、互斥量和通道阻塞等操作导致G阻塞，调度器会把当前的G切换为Gwaiting状态，调度其他G。")])]),a._v(" "),s("li",[s("p",[a._v("由于网络请求导致G阻塞，Go提供了网络轮训器（NetPoller）来处理网络请求和IO操作的问题，其背后是通过kqueue、epoll、iocp来实现IO多路复用。通过使用NetPoller进行网络系统调用，调度器可以防止G在进行系统调用时阻塞M，可以让M执行其他G，而不需要新的M。")])]),a._v(" "),s("li",[s("p",[a._v("当调用一些系统方法的时候（如文件IO操作）会发生阻塞，进行系统调用的G将阻塞M，G将被切换为Gsyscall状态，调度器只能引入其他M来绑定P。")])]),a._v(" "),s("li",[s("p",[a._v("执行sleep操作导致 M 被阻塞，Go程序有一个监控线程sysmon，监控长时间占用运行的G然后设置抢占标识符，别的G就可以抢先进来执行。")])])]),a._v(" "),s("h3",{attrs:{id:"有没有遇到goroutine飙升的问题-怎么排查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有没有遇到goroutine飙升的问题-怎么排查"}},[a._v("#")]),a._v(" 有没有遇到goroutine飙升的问题，怎么排查")]),a._v(" "),s("p",[a._v("channel:")]),a._v(" "),s("ul",[s("li",[a._v("无缓冲的channel的阻塞通常是写操作因为没有被读而阻塞")]),a._v(" "),s("li",[a._v("有缓冲的channel因为缓冲区满了，写操作阻塞")]),a._v(" "),s("li",[a._v("从channel读数据，结果没有Goroutine写")])]),a._v(" "),s("p",[a._v("select:")]),a._v(" "),s("ul",[s("li",[a._v("所有case上的操作阻塞")])]),a._v(" "),s("p",[a._v("web程序可以在代码上加入net/http/pprof 包，开启端口访问，访问debug/pprof,查看是否有Goroutine运行时间过长和查看Goroutine数量。")]),a._v(" "),s("p",[a._v("用go tool pprof -seconds=10 -http=:9999 XXX/debug/pprof/heap,生成监控信息文件，查看内存使用情况。")]),a._v(" "),s("p",[a._v("不是web程序在代码上加入runtime/pprof 包，可以将监控文件保存到指定目录下，可以使用go tool pprof 二进制文件位置 生成文件名 ，生成监控文件。")]),a._v(" "),s("h3",{attrs:{id:"实现一个负载均衡算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现一个负载均衡算法"}},[a._v("#")]),a._v(" 实现一个负载均衡算法")]),a._v(" "),s("h3",{attrs:{id:"go反射有了解吗-说说原理和作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go反射有了解吗-说说原理和作用"}},[a._v("#")]),a._v(" go反射有了解吗？说说原理和作用")]),a._v(" "),s("p",[a._v("反射是一种机制可以让我们在程序运行时访问、检测和修改对象本身状态或行为的一种能力。")]),a._v(" "),s("p",[a._v("从一个变量推断出器类型信息、以及存储的数据的一些信息，又或者是获取一个对象有什么方法可以调用等。")]),a._v(" "),s("h3",{attrs:{id:"线上有没有死锁的问题-怎么排查mysql死锁的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线上有没有死锁的问题-怎么排查mysql死锁的问题"}},[a._v("#")]),a._v(" 线上有没有死锁的问题，怎么排查MySQL死锁的问题")]),a._v(" "),s("p",[a._v("发现死锁异常后，我们可以直接使用"),s("code",[a._v("show engine innodb status")]),a._v("命令获取死锁信息，但是该命令只能获取最近一次的死锁信息。所以我们可以通过开启innodb的监控机制来获取实时的死锁信息，它会周期性打印innodb的运行状态到mysqld服务的错误日志中。")]),a._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("set")]),a._v(" GLOBAL innodb_status_output "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" ON"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("set")]),a._v(" GLOBAL innodb_status_output "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" OFF"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("set")]),a._v(" GLOBAL innodb_status_output_locks "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" ON"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("set")]),a._v(" GLOBAL innodb_status_output_locks "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" OFF"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("另外MySQL还提供了一个系统参数"),s("code",[a._v("innodb_print_all_deadlocks")]),a._v("专门记录死锁日志，当发生死锁时，死锁日志会记录到MySQL的错误日志文件中。")]),a._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("set")]),a._v(" GLOBAL innodb_print_all_deadlocks "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" ON"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"讲一下raft算法-zab、paxos、gossip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#讲一下raft算法-zab、paxos、gossip"}},[a._v("#")]),a._v(" 讲一下raft算法(zab、paxos、gossip)")])])}),[],!1,null,null,null);t.default=n.exports}}]);